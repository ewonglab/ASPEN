[{"path":[]},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_imbalance.html","id":"introduction","dir":"Articles","previous_headings":"Identifying genes with allelic imbalance","what":"Introduction","title":"allelic_imbalance","text":"ASPEN suite statistical tests evaluating allele-specific expression (ASE). models allelic ratio — defined fraction reads reference allele relative total number reads mapped gene — using beta-binomial distribution. allelic ratio restricted [0,1][0,1] interval distribution can described beta-binomial mean, μ\\mu, dispersion, θ\\theta. sequencing-based measurements, single-cell RNA-seq counts exhibit mean–variance bias: lowly expressed genes tend display higher relative variability highly expressed genes. ASPEN mitigates bias modelling allelic dispersion, θ\\theta, function gene expression. Useing hierarchical Bayes approach, shrinks original dispersion estimates toward common trend, represents level dispersion expected genes similar expression. ASPEN requires two input matrices: reference allele counts total counts (sum counts alleles).","code":""},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_imbalance.html","id":"setup","dir":"Articles","previous_headings":"Identifying genes with allelic imbalance","what":"Setup","title":"allelic_imbalance","text":"","code":"#loading required libraries suppressPackageStartupMessages({   library(ASPEN)   library(gridExtra)   library(openxlsx)   library(knitr)   library(SingleCellExperiment)   library(scran)   library(huxtable) })"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_imbalance.html","id":"loading-allele-specifc-count-data","dir":"Articles","previous_headings":"Identifying genes with allelic imbalance","what":"Loading allele-specifc count data","title":"allelic_imbalance","text":"example, use mouse brain organoid data Bl6Cast F1 hybrids (Medina-Cano et al., 2025). load reference allele counts (Bl6 counts) total counts (sum counts alleles). Cell identities previously annotated based marker gene expression, resulting five major cell types: neurogenic progenitor cells (adial glial cells, RGCs), intermediate progenitors cells (IPCs), deep layer neurons (cortical neurons), gliogenic progenitor cells (gliogenic RGCs) olygodendrocyte precursor cells (OPCs). cell abundance neuronal subtype","code":"data(\"Bl6_Cast_a1\") data(\"Bl6_Cast_tot\") load_file <- system.file(\"extdata\", \"Bl6_Cast_cell_annot.xlsx\", package = \"ASPEN\") cell_annot <- read.xlsx(load_file, rowNames = T) #adding barcode id cell_annot$cell_id <- paste(cell_annot$clone, cell_annot$cell_barcode, sep = \"_\") print_md(as_huxtable(head(cell_annot))) #> ----------------------------------------------------------------------- #>  cell_barcode background cell_type    cell_idents  clone  cell_id       #> ------------- ---------- ------------ ------------ ------ ------------- #>  AAACCCACAGCA cast_b6    Gliogenic    Gliogenic    clone3 clone3_AAACC  #>  GATG                    progenitor   RGCs                CACAGCAGATG   #>                          cells                                          #>                                                                         #>  AAACCCATCAGA cast_b6    Gliogenic    Gliogenic    clone3 clone3_AAACC  #>  GCGA                    progenitor   RGCs                CATCAGAGCGA   #>                          cells                                          #>                                                                         #>  AAACGAAGTAGT cast_b6    Neurogenic   RGCs         clone3 clone3_AAACG  #>  TAGA                    progenitor                       AAGTAGTTAGA   #>                          cells                                          #>                                                                         #>  AAACGAAGTGTT cast_b6    Intermediate IPCs         clone3 clone3_AAACG  #>  ATCG                    neuronal                         AAGTGTTATCG   #>                          progenitors                                    #>                                                                         #>  AAACGAATCTCG cast_b6    Deep layer   Cortical     clone3 clone3_AAACG  #>  TCAC                    neurons      neurons             AATCTCGTCAC   #>                                                                         #>  AAAGGATGTATG cast_b6    Intermediate IPCs         clone3 clone3_AAAGG  #>  CTTG                    neuronal                         ATGTATGCTTG   #>                          progenitors                                    #> ----------------------------------------------------------------------- print_md(as_huxtable(table(cell_annot$cell_idents))) #> ----------------------------- #>                   V1          #> ----------------- ----------- #>  Cortical neurons 1615        #>                               #>    Gliogenic RGCs 1157        #>                               #>              IPCs 1274        #>                               #>              OPCs 1523        #>                               #>              RGCs 935         #> -----------------------------"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_imbalance.html","id":"counts-normalisation","dir":"Articles","previous_headings":"Identifying genes with allelic imbalance","what":"Counts normalisation","title":"allelic_imbalance","text":"first normalize raw single-cell counts using [computeSumFactors()] function scran package (Lun, et al. 2016). create SingleCellExperiment object using total reference allele count matrices. Lowly expressed genes (expressed less 10 cells) removed. reference allele total counts normalized parallel using size factor estimates.","code":"#keeping annotated cells in the count matrices Cast_B6_a1 <- Cast_B6_a1[,gsub(\".*_\", \"\", colnames(Cast_B6_a1)) %in% cell_annot$cell_barcode] Cast_B6_tot <- Cast_B6_tot[,gsub(\".*_\", \"\", colnames(Cast_B6_tot)) %in% cell_annot$cell_barcode]  #creating SingleCellExperiment object ase_sce <- SingleCellExperiment(assays = list(a1 = as.matrix(Cast_B6_a1),                                               tot = as.matrix(Cast_B6_tot))) #removing lowly expressed genes ase_sce <- ase_sce[rowSums(assays(ase_sce)[['tot']] > 1) >= 10, ] print_md(as_huxtable(dim(ase_sce))) #> ---------------------- #>                    V1  #>                        #>                  1551  #>                        #>                  6312  #> ---------------------- #adding sample id to the metadata colData(ase_sce)$replicate <- gsub(\"_.*\", \"\", rownames(colData(ase_sce)))  #calculate size factors ase_sce <- computeSumFactors(ase_sce,                               clusters=colData(ase_sce)$replicate, assay.type = \"tot\") #normalizing counts ase_sce  <- logNormCounts(ase_sce,                            size.factors = colData(ase_sce)$sizeFactor,                           log = NULL, transform = \"none\", assay.type = \"tot\", name = \"tot_norm\")  #normalizing reference counts by the same size factors ase_sce  <- logNormCounts(ase_sce,                            size.factors = colData(ase_sce)$sizeFactor,                           log = NULL, transform = \"none\", assay.type = \"a1\", name = \"a1_norm\")  #checking that normalised counts assays are added to the SingleCellExperiment object ase_sce@assays #> An object of class \"SimpleAssays\" #> Slot \"data\": #> List of length 4 #> names(4): a1 tot tot_norm a1_norm"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_imbalance.html","id":"splitting-count-matrices-by-cell-type","dir":"Articles","previous_headings":"Identifying genes with allelic imbalance","what":"Splitting count matrices by cell type","title":"allelic_imbalance","text":"Allelic imbalance test run separately cell type. First, split metadata object cell types. Since beta-binomial parameters estimated raw counts, first split raw total reference allele count matrices cell type. proceeding, check reference total count matrices dimensions. demonstration purposes . condition met, ASPEN issue warning. Next, check gene order identical reference total count matrices. , demonstration purposes . condition met, ASPEN issue warning.","code":"#splitting the metadata by cell type cell_list <- split(cell_annot, f = cell_annot$cell_idents) #splitting SingleCellExperiemnt object by cell types ase_sce_byct <- list() for (i in 1:length(cell_list)){     ase_sce_byct[[i]] <- ase_sce[,colnames(ase_sce) %in% cell_list[[i]]$cell_id] }  #removing genes with low expression ase_sce_byct_filt <- lapply(ase_sce_byct, function(q)                                            q[rowSums(assays(q)[['tot']] > 1) >= 10, ])   #extracting raw total counts tot_mat <- lapply(ase_sce_byct_filt, function(q) as.matrix(assays(q)[['tot']])) #extracting raw reference allele counts a1_mat <- lapply(ase_sce_byct_filt, function(q) as.matrix(assays(q)[['a1']])) #selecting genes that matched filtering criteria a1_mat <- mapply(function(p,q) p[rownames(q), ], a1_mat, tot_mat, SIMPLIFY = F) mapply(function(p, q) dim(p) == dim(q), a1_mat, tot_mat, SIMPLIFY = F) #> [[1]] #> [1] TRUE TRUE #>  #> [[2]] #> [1] TRUE TRUE #>  #> [[3]] #> [1] TRUE TRUE #>  #> [[4]] #> [1] TRUE TRUE #>  #> [[5]] #> [1] TRUE TRUE mapply(function(p, q) table(rownames(p) == rownames(q)), a1_mat, tot_mat, SIMPLIFY = F) #> [[1]] #>  #> TRUE  #> 1386  #>  #> [[2]] #>  #> TRUE  #> 1414  #>  #> [[3]] #>  #> TRUE  #> 1503  #>  #> [[4]] #>  #> TRUE  #> 1521  #>  #> [[5]] #>  #> TRUE  #> 1520"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_imbalance.html","id":"estimating-beta-binomial-parameters","dir":"Articles","previous_headings":"Identifying genes with allelic imbalance","what":"Estimating beta-binomial parameters","title":"allelic_imbalance","text":"estimate beta-binomial parameters separately cell type.","code":"bb_init_params <- mapply(function(p, q) estim_bbparams(p, q, min_cells = 5, cores = 6), a1_mat, tot_mat, SIMPLIFY = F) print_md(as_huxtable(head(bb_init_params[[1]]))) #> Warning in to_md.huxtable(ht, ...): Couldn't print whole table in max_width = 80 characters. #> Printing 8/9 columns. #> --------------------------------------------------------------------- #>         N     AR tot_gene tot_gene    alpha     beta  bb_mu bb_theta  #>                     _mean _varianc                                    #>                                  e                                    #> --------- ------ -------- -------- -------- -------- ------ --------  #>       850  0.984     5.94     29.3      175     2.41  0.986   0.0056  #>                                                                       #>  1.06e+03  0.999     8.21     45.4 4.41e+03     3.42  0.999   0.0002  #>                                                                       #>        37  0.976     1.09     1.78     14.6    0.343  0.977    0.067  #>                                                                       #>        25 0.0113    0.953     1.54    0.807     64.2 0.0124   0.0154  #>                                                                       #>  1.43e+03  0.695     21.3      322      184     84.5  0.685   0.0037  #>                                                                       #>        93 0.0039      1.4     3.57     25.2 6.94e+03 0.0036   0.0001  #> ---------------------------------------------------------------------"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_imbalance.html","id":"defining-lowly-expressed-genes","dir":"Articles","previous_headings":"Identifying genes with allelic imbalance","what":"Defining lowly expressed genes","title":"allelic_imbalance","text":"ASPEN applies shrinkage selectively - genes low dispersion moderated allelic imbalance evaluated using unadjusted values. Genes stable dispersion determined based residuals dispersion modeling step. ASPEN calculates meadian absolute deviation-squared (MAD2{MAD}^2), used cut-.","code":"min_cutoff <- lapply(bb_init_params, calc_mad) min_cutoff #> [[1]] #> [1] 0.002254469 #>  #> [[2]] #> [1] 0.001084665 #>  #> [[3]] #> [1] 0.002810162 #>  #> [[4]] #> [1] 0.00113423 #>  #> [[5]] #> [1] 0.001276519"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_imbalance.html","id":"estimate-appropriate-shrinkage-parameters","dir":"Articles","previous_headings":"Identifying genes with allelic imbalance","what":"Estimate appropriate shrinkage parameters","title":"allelic_imbalance","text":"estimate shrinkage parameters, NN δ\\delta, separately cell type. Optionally, genes low dispersion can excluded estimation setting minimum cut-value thetaFilter parameter","code":"set.seed(1001011) shrink_pars <- mapply(function(p, q) estim_delta(p, thetaFilter = q),                       bb_init_params, min_cutoff, SIMPLIFY = F) shrink_pars #> [[1]] #>     N delta  #>    17    18  #>  #> [[2]] #>     N delta  #>    13    15  #>  #> [[3]] #>     N delta  #>    17    17  #>  #> [[4]] #>     N delta  #>    14    17  #>  #> [[5]] #>     N delta  #>    20    19"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_imbalance.html","id":"performing-bayesian-shrinkage","dir":"Articles","previous_headings":"Identifying genes with allelic imbalance","what":"Performing Bayesian shrinkage","title":"allelic_imbalance","text":"use [correct_theta()] ASPEN obtain posterior dispersion estimates. minimum dispersion value set thetaFilter parameter. genes residuals value excluded shrinkage.","code":"bb_init_params <- lapply(bb_init_params, function(q) q[!is.na(q$bb_theta),]) shrunk_estims_vardelta <- mapply(function(p, q) correct_theta(p, N_set = q[1], delta_set = q[2], thetaFilter = 0.001),                                  bb_init_params, shrink_pars, SIMPLIFY = F) print_md(as_huxtable(head(shrunk_estims_vardelta[[1]]))) #> Warning in to_md.huxtable(ht, ...): Couldn't print whole table in max_width = 80 characters. #> Printing 8/13 columns. #> --------------------------------------------------------------------- #>         N     AR tot_gene tot_gene    alpha     beta  bb_mu bb_theta  #>                     _mean _varianc                                    #>                                  e                                    #> --------- ------ -------- -------- -------- -------- ------ --------  #>       850  0.984     5.94     29.3      175     2.41  0.986   0.0056  #>                                                                       #>  1.06e+03  0.999     8.21     45.4 4.41e+03     3.42  0.999   0.0002  #>                                                                       #>        37  0.976     1.09     1.78     14.6    0.343  0.977    0.067  #>                                                                       #>        25 0.0113    0.953     1.54    0.807     64.2 0.0124   0.0154  #>                                                                       #>  1.43e+03  0.695     21.3      322      184     84.5  0.685   0.0037  #>                                                                       #>        93 0.0039      1.4     3.57     25.2 6.94e+03 0.0036   0.0001  #> ---------------------------------------------------------------------"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_imbalance.html","id":"visualizing-model-fit-","dir":"Articles","previous_headings":"Identifying genes with allelic imbalance","what":"Visualizing model fit.","title":"allelic_imbalance","text":"Genes extremely low dispersion levels form distinct cluster dispersion–expression plot. estimate genes θ<0.001\\theta < 0.001. exclude shrinkage procedure, set thetaFilter = 0.001 [correct_theta()] function.  Visualizing original shrunk θ\\theta’s.  Alternatively, can set δ\\delta NN parameters manually. ### Estimating global beta-binomial parameters Evaluating global beta-binomial parameters provides overall measure bias toward reference allele. done estimating beta-binomial distribution parameters across genes, excluding located sex chromosomes known imprinted genes. GRCm38 (mm10) mouse genome, package includes predefined lists X- Y-linked genes well set validated imprinted genes. can excluded passing genes.excl parameter [glob_disp()] function.","code":"celltypes <- list(\"Cortical neurons\", \"Gliogenic RGCs\", \"IPCs\", \"OPCs\", \"RGCs\") p_disp <- mapply(function(p,q) plot_disp_fit_theta(p, midpoint = 100) +                                           labs(subtitle = paste0(q, \" Cast_B6\")) + geom_hline(yintercept = log(1e-03), linetype = \"dashed\", linewidth = 1),                  shrunk_estims_vardelta, celltypes, SIMPLIFY = F) do.call(grid.arrange, c(p_disp, ncol = 3)) #> Warning: Removed 48 rows containing non-finite outside the scale range #> (`stat_pointdensity()`). #> Warning: Removed 73 rows containing non-finite outside the scale range #> (`stat_pointdensity()`). #> Warning: Removed 81 rows containing non-finite outside the scale range #> (`stat_pointdensity()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_line()`). #> Warning: Removed 60 rows containing non-finite outside the scale range #> (`stat_pointdensity()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_line()`). #> Warning: Removed 96 rows containing non-finite outside the scale range #> (`stat_pointdensity()`). p_disp <- mapply(function(p,q) plot_disp(p) +                                labs(subtitle = paste0(q, \" Cast_B6\")) +                                 geom_hline(yintercept = log(1e-03), linetype = \"dashed\", linewidth = 1),                  shrunk_estims_vardelta, celltypes, SIMPLIFY = F) do.call(grid.arrange, c(p_disp, ncol = 3)) #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_line()`). #> Removed 1 row containing missing values or values outside the scale range #> (`geom_line()`). shrunk_estims <- lapply(bb_init_params, function(q) correct_theta(q, delta_set = 50, N_set = 30, thetaFilter = 0.001)) p_disp <- mapply(function(p,q) plot_disp(p) +                                labs(subtitle = paste0(q, \" Cast_B6\")) +                                 geom_hline(yintercept = log(1e-03), linetype = \"dashed\", linewidth = 1),                  shrunk_estims, celltypes, SIMPLIFY = F)  do.call(grid.arrange, c(p_disp, ncol = 3)) #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_line()`). #> Removed 1 row containing missing values or values outside the scale range #> (`geom_line()`). load_file <- system.file(\"extdata\", \"mm10_genesXY.txt\", package = \"ASPEN\") genesXY <- read.table(load_file) load_file <- system.file(\"extdata\", \"mm10_imprinted_genes.xlsx\", package = \"ASPEN\") genesIMPR <- read.xlsx(load_file, colNames = T) genes2remove <- c(genesXY$V1, genesIMPR$imprinted.genes)  global_estims <- mapply(function(p, q)  glob_disp(p, q, genes.excl = genes2remove, min_counts = 5),                         a1_mat, tot_mat, SIMPLIFY = F) global_estims #> [[1]] #>     mu.1  theta.1  alpha.1   beta.1  #> 0.544500 0.066400 8.203912 6.862176  #>  #> [[2]] #>      mu.1   theta.1   alpha.1    beta.1  #>  0.530700  0.050300 10.553884  9.332994  #>  #> [[3]] #>     mu.1  theta.1  alpha.1   beta.1  #> 0.541900 0.055100 9.827842 8.307707  #>  #> [[4]] #>      mu.1   theta.1   alpha.1    beta.1  #>  0.528700  0.049700 10.639340  9.483841  #>  #> [[5]] #>      mu.1   theta.1   alpha.1    beta.1  #>  0.529800  0.050500 10.496454  9.314595"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_imbalance.html","id":"visualizing-global-allelic-ratio-distribution-across-all-genes-","dir":"Articles","previous_headings":"Identifying genes with allelic imbalance","what":"Visualizing global allelic ratio distribution across all genes.","title":"allelic_imbalance","text":"Deviation balanced allelic expression (AR=0.5AR = 0.5) indicates presence skew towards reference allele. reference allele bias detected, null hypothesis allelic imbalance testing adjusted accordingly. analysis Bl6Cast hybrids, instead using H0:μ=0.5H_0: \\mu = 0.5, null hypotheses adjusted H0:μ=0.54H_0: \\mu = 0.54 Cortical neurons IPCs datasets H0:μ=0.53H_0: \\mu = 0.53 Gliogenic RGCs, OPCs RGCs.","code":"p_glob <- mapply(function(p,q,r,s) plot_glob_params(p, q, r, min_counts = 5) +                                labs(subtitle = paste0(s, \" Cast_B6\")),                  a1_mat, tot_mat, global_estims, celltypes, SIMPLIFY = F) #> Warning: The melt generic in data.table has been passed a data.frame and will #> attempt to redirect to the relevant reshape2 method; please note that reshape2 #> is superseded and is no longer actively developed, and this redirection is now #> deprecated. To continue using melt methods from reshape2 while both libraries #> are attached, e.g. melt.list, you can prepend the namespace, i.e. #> reshape2::melt(plot_data). In the next version, this warning will become an #> error.  #> Warning: The melt generic in data.table has been passed a data.frame and will #> attempt to redirect to the relevant reshape2 method; please note that reshape2 #> is superseded and is no longer actively developed, and this redirection is now #> deprecated. To continue using melt methods from reshape2 while both libraries #> are attached, e.g. melt.list, you can prepend the namespace, i.e. #> reshape2::melt(plot_data). In the next version, this warning will become an #> error.  #> Warning: The melt generic in data.table has been passed a data.frame and will #> attempt to redirect to the relevant reshape2 method; please note that reshape2 #> is superseded and is no longer actively developed, and this redirection is now #> deprecated. To continue using melt methods from reshape2 while both libraries #> are attached, e.g. melt.list, you can prepend the namespace, i.e. #> reshape2::melt(plot_data). In the next version, this warning will become an #> error.  #> Warning: The melt generic in data.table has been passed a data.frame and will #> attempt to redirect to the relevant reshape2 method; please note that reshape2 #> is superseded and is no longer actively developed, and this redirection is now #> deprecated. To continue using melt methods from reshape2 while both libraries #> are attached, e.g. melt.list, you can prepend the namespace, i.e. #> reshape2::melt(plot_data). In the next version, this warning will become an #> error.  #> Warning: The melt generic in data.table has been passed a data.frame and will #> attempt to redirect to the relevant reshape2 method; please note that reshape2 #> is superseded and is no longer actively developed, and this redirection is now #> deprecated. To continue using melt methods from reshape2 while both libraries #> are attached, e.g. melt.list, you can prepend the namespace, i.e. #> reshape2::melt(plot_data). In the next version, this warning will become an #> error. do.call(grid.arrange, c(p_glob, ncol = 3))"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_imbalance.html","id":"allelic-imbalance-test","dir":"Articles","previous_headings":"Identifying genes with allelic imbalance","what":"Allelic imbalance test","title":"allelic_imbalance","text":"allelic imbalance test performed normalized counts. run [bb_mean()] identify genes allelic ratio deviating null hypothesis. default, ASPEN requires gene expressed least 5 cells minimum 5 counts per cell. thresholds can adjusted min_cells min_counts parameters. \\ gene meet quality filter (, minimum 5 cells least 5 mapped reads), allelic imbalance test performed gene. genes NA fields. remove genes calculating false discovery rate (FDR). Top 10 genes significant allelic imbalance FDR-adjustment can visualize allelic distribution top-ranked genes. plots , point represents single cell, points colored log(mean expression).","code":"#extracting normalised reference allele and total counts tot_norm <- lapply(ase_sce_byct_filt, function(q) as.matrix(assays(q)[['tot_norm']]))  #extracting raw reference allele counts a1_norm <- lapply(ase_sce_byct_filt, function(q) as.matrix(assays(q)[['a1_norm']])) #ensure that the genes order is the same a1_norm <- mapply(function(p,q) p[rownames(q), ], a1_norm, tot_norm, SIMPLIFY = F) bb_mean_res <- mapply(function(p, q, r, s) bb_mean(p, q, r,                                                     min_cells = 5, min_counts = 5,                                                     glob_params = s),                        a1_norm, tot_norm, shrunk_estims, global_estims, SIMPLIFY = F) bb_mean_res <- lapply(bb_mean_res, function(q) q <- q[!is.na(q$pval_mean),])  #calculating fdr bb_mean_res <- lapply(bb_mean_res, function(q) {q$fdr_mean <- p.adjust(q$pval_mean,                                                                         method = \"fdr\");                                                          q <- q[order(q$fdr_mean),];                                                 return(q)}) lapply(bb_mean_res, function(q) q[1:10, c(\"AR\", \"fdr_mean\")]) #> [[1]] #>                 AR fdr_mean #> Stmn1  0.984126550        0 #> Uchl1  0.998927886        0 #> Hmgb1  0.976436130        0 #> Gm9794 0.011265810        0 #> Ftl1   0.694522296        0 #> Mif    0.003895411        0 #> Rps15  0.838435691        0 #> Rps24  0.203198897        0 #> Sec61g 0.024611841        0 #> Eif4a1 0.998207009        0 #>  #> [[2]] #>                  AR fdr_mean #> Stmn1   0.995669976        0 #> Uchl1   0.999464668        0 #> Gm9794  0.008240608        0 #> Ftl1    0.680002167        0 #> Rps15   0.864274116        0 #> Rps24   0.202660961        0 #> Sec61g  0.032801669        0 #> Hnrnpa1 0.018688305        0 #> Rpl35a  0.999114066        0 #> Ubb     0.998768725        0 #>  #> [[3]] #>                  AR fdr_mean #> Stmn1   0.988800741        0 #> Uchl1   0.999650513        0 #> Gm9794  0.011140701        0 #> Ftl1    0.672111891        0 #> Mif     0.002981515        0 #> Rps15   0.865347111        0 #> Rps24   0.206824332        0 #> Sec61g  0.024171380        0 #> Eif4a1  0.998726346        0 #> Hnrnpa1 0.026185317        0 #>  #> [[4]] #>                 AR fdr_mean #> Stmn1  0.990463015        0 #> Uchl1  0.999502275        0 #> Hmgb1  0.947855448        0 #> Gm9794 0.013659644        0 #> Ftl1   0.666048789        0 #> Mif    0.002498002        0 #> Rps15  0.882687034        0 #> Rps24  0.207635447        0 #> Sec61g 0.029949202        0 #> Eif4a1 0.999096341        0 #>  #> [[5]] #>                 AR fdr_mean #> Stmn1  0.991578964        0 #> Uchl1  0.998702983        0 #> Gm9794 0.004754441        0 #> Ftl1   0.675546570        0 #> Mif    0.004378284        0 #> Rps15  0.867803259        0 #> Rps24  0.195924785        0 #> Sec61g 0.028287041        0 #> Eif4a1 0.998525074        0 #> Rpl35a 0.997623061        0 #specifiying genes for plotting genes_select <- list(\"Stmn1\", \"Ftl1\", \"Mif\")  #generating data frame for plotting plot_data <- lapply(genes_select, function(q) makedf(a1_mat[[1]], tot_mat[[1]], gene = q))  p_ar_dist <- mapply(function(p,q,r) plot_distr(p, gene = q),                  plot_data, genes_select, SIMPLIFY = F) do.call(grid.arrange, c(p_ar_dist, ncol = 3))"},{"path":[]},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_variance.html","id":"introduction","dir":"Articles","previous_headings":"Allelic variance test","what":"Introduction","title":"allelic_variance","text":"use Bl6Cast dataset demonstrate ASPEN-var test. initial processing steps described “Allelic imbalance test” vignette. already output [estim_bbparams()] function, can skip directly .  ","code":"#loading required libraries suppressPackageStartupMessages({   library(ASPEN)   library(gridExtra)   library(openxlsx)   library(knitr)   library(SingleCellExperiment)   library(scran)   library(huxtable) })"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_variance.html","id":"loading-allele-specifc-count-data","dir":"Articles","previous_headings":"Allelic variance test","what":"Loading allele-specifc count data","title":"allelic_variance","text":"","code":"data(\"Bl6_Cast_a1\") data(\"Bl6_Cast_tot\") load_file <- system.file(\"extdata\", \"Bl6_Cast_cell_annot.xlsx\", package = \"ASPEN\") cell_annot <- read.xlsx(load_file, rowNames = T) #adding barcode id cell_annot$cell_id <- paste(cell_annot$clone, cell_annot$cell_barcode, sep = \"_\") print_md(as_huxtable(head(cell_annot))) #> ----------------------------------------------------------------------- #>  cell_barcode background cell_type    cell_idents  clone  cell_id       #> ------------- ---------- ------------ ------------ ------ ------------- #>  AAACCCACAGCA cast_b6    Gliogenic    Gliogenic    clone3 clone3_AAACC  #>  GATG                    progenitor   RGCs                CACAGCAGATG   #>                          cells                                          #>                                                                         #>  AAACCCATCAGA cast_b6    Gliogenic    Gliogenic    clone3 clone3_AAACC  #>  GCGA                    progenitor   RGCs                CATCAGAGCGA   #>                          cells                                          #>                                                                         #>  AAACGAAGTAGT cast_b6    Neurogenic   RGCs         clone3 clone3_AAACG  #>  TAGA                    progenitor                       AAGTAGTTAGA   #>                          cells                                          #>                                                                         #>  AAACGAAGTGTT cast_b6    Intermediate IPCs         clone3 clone3_AAACG  #>  ATCG                    neuronal                         AAGTGTTATCG   #>                          progenitors                                    #>                                                                         #>  AAACGAATCTCG cast_b6    Deep layer   Cortical     clone3 clone3_AAACG  #>  TCAC                    neurons      neurons             AATCTCGTCAC   #>                                                                         #>  AAAGGATGTATG cast_b6    Intermediate IPCs         clone3 clone3_AAAGG  #>  CTTG                    neuronal                         ATGTATGCTTG   #>                          progenitors                                    #> -----------------------------------------------------------------------"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_variance.html","id":"data-pre-processing","dir":"Articles","previous_headings":"Allelic variance test","what":"Data pre-processing","title":"allelic_variance","text":"load reference allele total counts create SingleCellExperiment object. Lowly expressed genes (expressed less 10 cells) removed.","code":"#keeping annotated cells in the count matrices Cast_B6_a1 <- Cast_B6_a1[,gsub(\".*_\", \"\", colnames(Cast_B6_a1)) %in% cell_annot$cell_barcode] Cast_B6_tot <- Cast_B6_tot[,gsub(\".*_\", \"\", colnames(Cast_B6_tot)) %in% cell_annot$cell_barcode] #creating SingleCellExperiment object ase_sce <- SingleCellExperiment(assays = list(a1 = as.matrix(Cast_B6_a1),                                               tot = as.matrix(Cast_B6_tot))) #removing lowly expressed genes ase_sce <- ase_sce[rowSums(assays(ase_sce)[['tot']] > 1) >= 10, ] print_md(as_huxtable(dim(ase_sce))) #> ---------------------- #>                    V1  #>                        #>                  1551  #>                        #>                  6312  #> ----------------------"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_variance.html","id":"splitting-count-matrices-by-cell-type","dir":"Articles","previous_headings":"Allelic variance test","what":"Splitting count matrices by cell type","title":"allelic_variance","text":"test run separately cell type. First, split metadata object cell types. Since beta-binomial parameters estimated raw counts, first split raw total reference allele count matrices cell type.","code":"#splitting the metadata by cell type cell_list <- split(cell_annot, f = cell_annot$cell_idents) #splitting SingleCellExperiemnt object by cell types ase_sce_byct <- list() for (i in 1:length(cell_list)){     ase_sce_byct[[i]] <- ase_sce[,colnames(ase_sce) %in% cell_list[[i]]$cell_id] }  #removing genes with low expression ase_sce_byct_filt <- lapply(ase_sce_byct, function(q)                                            q[rowSums(assays(q)[['tot']] > 1) >= 10, ])   #extracting raw total counts tot_mat <- lapply(ase_sce_byct_filt, function(q) as.matrix(assays(q)[['tot']])) #extracting raw reference allele counts a1_mat <- lapply(ase_sce_byct_filt, function(q) as.matrix(assays(q)[['a1']])) #selecting genes that matched filtering criteria a1_mat <- mapply(function(p,q) p[rownames(q), ], a1_mat, tot_mat, SIMPLIFY = F)"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_variance.html","id":"estimating-beta-binomial-parameters","dir":"Articles","previous_headings":"Allelic variance test","what":"Estimating beta-binomial parameters","title":"allelic_variance","text":"","code":"bb_init_params <- mapply(function(p, q) estim_bbparams(p, q, min_cells = 5, cores = 6), a1_mat, tot_mat, SIMPLIFY = F)"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_variance.html","id":"defining-lowly-expressed-genes","dir":"Articles","previous_headings":"Allelic variance test","what":"Defining lowly expressed genes","title":"allelic_variance","text":"","code":"min_cutoff <- lapply(bb_init_params, calc_mad) min_cutoff #> [[1]] #> [1] 0.002254469 #>  #> [[2]] #> [1] 0.001084665 #>  #> [[3]] #> [1] 0.002810162 #>  #> [[4]] #> [1] 0.00113423 #>  #> [[5]] #> [1] 0.001276519"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_variance.html","id":"estimate-appropriate-shrinkage-parameters","dir":"Articles","previous_headings":"Allelic variance test","what":"Estimate appropriate shrinkage parameters","title":"allelic_variance","text":"","code":"set.seed(1001011) shrink_pars <- mapply(function(p, q) estim_delta(p, thetaFilter = q),                       bb_init_params, min_cutoff, SIMPLIFY = F) shrink_pars #> [[1]] #>     N delta  #>    17    18  #>  #> [[2]] #>     N delta  #>    13    15  #>  #> [[3]] #>     N delta  #>    17    17  #>  #> [[4]] #>     N delta  #>    14    17  #>  #> [[5]] #>     N delta  #>    20    19"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_variance.html","id":"performing-bayesian-shrinkage","dir":"Articles","previous_headings":"Allelic variance test","what":"Performing Bayesian shrinkage","title":"allelic_variance","text":"explained “Allelic imbalance test” vignette, low-dispersion genes excluded local regression trend modelling. However, genes still evaluated depature expected levels allelic variation. calculate stabilized dispersion gene category, shrinkAll parameter [correct_theta()] function set TRUE (default option FALSE - used [bb_mean()] test).","code":"bb_init_params <- lapply(bb_init_params, function(q) q[!is.na(q$bb_theta),]) shrunk_estims <- mapply(function(p, q) correct_theta(p, N_set = q[1], delta_set = q[2], thetaFilter = 0.001, shrinkAll = TRUE),                                  bb_init_params, shrink_pars, SIMPLIFY = F) print_md(as_huxtable(head(shrunk_estims[[1]]))) #> Warning in to_md.huxtable(ht, ...): Couldn't print whole table in max_width = 80 characters. #> Printing 8/13 columns. #> --------------------------------------------------------------------- #>         N     AR tot_gene tot_gene    alpha     beta  bb_mu bb_theta  #>                     _mean _varianc                                    #>                                  e                                    #> --------- ------ -------- -------- -------- -------- ------ --------  #>       850  0.984     5.94     29.3      175     2.41  0.986   0.0056  #>                                                                       #>  1.06e+03  0.999     8.21     45.4 4.41e+03     3.42  0.999   0.0002  #>                                                                       #>        37  0.976     1.09     1.78     14.6    0.343  0.977    0.067  #>                                                                       #>        25 0.0113    0.953     1.54    0.807     64.2 0.0124   0.0154  #>                                                                       #>  1.43e+03  0.695     21.3      322      184     84.5  0.685   0.0037  #>                                                                       #>        93 0.0039      1.4     3.57     25.2 6.94e+03 0.0036   0.0001  #> ---------------------------------------------------------------------"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_variance.html","id":"test-for-the-depature-from-the-expected-levels-of-allelic-variation","dir":"Articles","previous_headings":"Allelic variance test","what":"Test for the depature from the expected levels of allelic variation","title":"allelic_variance","text":"Unlike test alelic imbalance, [bb_var()] performed raw counts normalization can distort variation counts. [bb_mean()], apply filtering threshold requiring gene expressed least five cells minimum 5 reads. Significance assessed using permutation test. default, number permutations set 500, can adjusted n_pmt n_sim parameters. genes meet quality cut-threshold (: minimum 5 cells least 5 mapped reads per cell), variance test performed. genes NA values output columns. remove genes calculating false discovery rate (FDR). \\","code":"bb_var_res <- mapply(function(p, q, r) bb_var(p, q, estimates = r,                                                min_cells = 5, min_counts = 5,                                               n_pmt = 500, n_sim = 500),                          a1_mat, tot_mat, shrunk_estims, SIMPLIFY = F) bb_var_res <- lapply(bb_var_res, function(q) q <- q[!is.na(q$pval_disp),])  #calculating fdr bb_var_res <- lapply(bb_var_res, function(q)                                  {q$fdr_disp <- p.adjust(q$pval_disp, method = \"fdr\");                                  q <- q[order(q$fdr_disp),];                                  return(q)})"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_variance.html","id":"defining-genes-with-monoallelic-expression","dir":"Articles","previous_headings":"Allelic variance test","what":"Defining genes with monoallelic expression","title":"allelic_variance","text":"Beta-binomial parameters can also used identify genes monoallelic expression random monoallelic expression (RME). Genes classified monoallelically expressed parameter estimates meet either following criteria: α<1\\alpha < 1 β<1\\beta < 1. number genes classified monoallelically expressed per cell type: Visualizing allelic ratio distribution selected genes","code":"bb_var_res <- lapply(bb_var_res, function(q) {q$monoal <- ifelse(q$alpha < 1 | q$beta < 1, 1, 0);                                               return(q)}) lapply(bb_var_res, function(q) table(q$monoal)) #> [[1]] #>  #>   0   1  #> 933  41  #>  #> [[2]] #>  #>   0   1  #> 751  38  #>  #> [[3]] #>  #>   0   1  #> 820  35  #>  #> [[4]] #>  #>    0    1  #> 1233   45  #>  #> [[5]] #>  #>   0   1  #> 999  41 lapply(bb_var_res, function(q) q[q$monoal == 1, c(\"AR\", \"fdr_disp\")][1:10,]) #> [[1]] #>                      AR fdr_disp #> Meg3          0.9722762        0 #> Kcnq1ot1      0.1969765        0 #> Rian          0.9651826        0 #> Snrpn         0.2622304        0 #> Bex2          0.7055834        0 #> 9330162G02Rik 0.3506396        0 #> Gpm6b         0.7670272        0 #> Pgrmc1        0.7442399        0 #> Ndufb11       0.7112723        0 #> Pcsk1n        0.6716533        0 #>  #> [[2]] #>                 AR fdr_disp #> Meg3     0.9792260        0 #> Kcnq1ot1 0.1870162        0 #> Bex2     0.6371548        0 #> Gpm6b    0.5593086        0 #> Ndufb11  0.5618963        0 #> Pcsk1n   0.6507759        0 #> Tspan7   0.5777158        0 #> Sh3bgrl  0.6225959        0 #> Maged1   0.6058882        0 #> Mt3      0.6400374        0 #>  #> [[3]] #>                 AR fdr_disp #> Meg3     0.9669701        0 #> Tuba1b   0.9287204        0 #> Kcnq1ot1 0.2204702        0 #> Bex2     0.7045911        0 #> Gpm6b    0.7531993        0 #> Ndufb11  0.7084227        0 #> Pcsk1n   0.7234285        0 #> Tspan7   0.7403820        0 #> Dcx      0.7080914        0 #> Uba1     0.7219881        0 #>  #> [[4]] #>                 AR fdr_disp #> Hmgb1    0.9478554        0 #> Meg3     0.9668510        0 #> Kcnq1ot1 0.1750146        0 #> Bex2     0.6366406        0 #> Gpm6b    0.6032395        0 #> Ndufb11  0.5979667        0 #> Pcsk1n   0.6910833        0 #> Peg3     0.3223987        0 #> Tspan7   0.6856153        0 #> Uba1     0.6154512        0 #>  #> [[5]] #>                 AR fdr_disp #> Meg3     0.9707027        0 #> Kcnq1ot1 0.1671930        0 #> Bex2     0.6559426        0 #> Gpm6b    0.6250239        0 #> Ndufb11  0.6090887        0 #> Pcsk1n   0.6901007        0 #> Peg3     0.3161015        0 #> Tspan7   0.6268899        0 #> Dcx      0.8404762        0 #> Uba1     0.6338756        0 #specifiying genes for plotting genes_select <- list(\"Olig2\", \"Meg3\", \"Kcnq1ot1\")  #generating data frame for plotting plot_data <- lapply(genes_select, function(q) makedf(a1_mat[[4]], tot_mat[[4]], gene = q))  p_ar_dist <- mapply(function(p,q,r) plot_distr(p, gene = q),                  plot_data, genes_select, SIMPLIFY = F) do.call(grid.arrange, c(p_ar_dist, ncol = 3))"},{"path":"https://ewonglab.github.io/ASPEN/articles/allelic_variance.html","id":"defining-genes-with-rme","dir":"Articles","previous_headings":"Allelic variance test","what":"Defining genes with RME","title":"allelic_variance","text":"define genes RME α<1\\alpha < 1 β<1\\beta < 1 approximately equal (absolute difference α\\alpha β\\beta set less 0.5). number RME genes Top 10 RME genes can visualize far dispersion genes RME deviates expected dispersion genes similar expression  Bex2 (brain expressed X-linked 2) gene shows strong bias toward maternal (Bl6) allele. allelic variation greatly deviates expected dispersion genes similar expression. can compare allelic distribution gene show deviation common trend - example, Npm1.","code":"bb_var_res <- lapply(bb_var_res, function(q) {q$abdiff <- abs(q$alpha - q$beta);                                                    return(q)})  bb_var_res <- lapply(bb_var_res, function(q) {q$rme <- ifelse(q$alpha < 1 &                                                                 q$beta < 1 &                                                                 q$abdiff < 0.5, 1, 0);                                                 return(q)}) lapply(bb_var_res, function(q) table(q$rme)) #> [[1]] #>  #>   0   1  #> 950  24  #>  #> [[2]] #>  #>   0   1  #> 767  22  #>  #> [[3]] #>  #>   0   1  #> 830  25  #>  #> [[4]] #>  #>    0    1  #> 1248   30  #>  #> [[5]] #>  #>    0    1  #> 1015   25 lapply(bb_var_res, function(q) q[q$rme == 1, c(\"AR\", \"fdr_disp\")][1:10,]) #> [[1]] #>                AR fdr_disp #> Bex2    0.7055834        0 #> Gpm6b   0.7670272        0 #> Pgrmc1  0.7442399        0 #> Ndufb11 0.7112723        0 #> Pcsk1n  0.6716533        0 #> Tspan7  0.7179053        0 #> Dcx     0.6763636        0 #> Uba1    0.6967240        0 #> Sh3bgrl 0.6997536        0 #> Maged1  0.6769483        0 #>  #> [[2]] #>                AR fdr_disp #> Bex2    0.6371548        0 #> Gpm6b   0.5593086        0 #> Ndufb11 0.5618963        0 #> Pcsk1n  0.6507759        0 #> Tspan7  0.5777158        0 #> Sh3bgrl 0.6225959        0 #> Maged1  0.6058882        0 #> Mt3     0.6400374        0 #> Atrx    0.5412517        0 #> Nsdhl   0.5239680        0 #>  #> [[3]] #>                AR fdr_disp #> Bex2    0.7045911        0 #> Gpm6b   0.7531993        0 #> Ndufb11 0.7084227        0 #> Pcsk1n  0.7234285        0 #> Tspan7  0.7403820        0 #> Dcx     0.7080914        0 #> Uba1    0.7219881        0 #> Sh3bgrl 0.7040431        0 #> Maged1  0.6903720        0 #> Mt3     0.4570011        0 #>  #> [[4]] #>                AR fdr_disp #> Bex2    0.6366406        0 #> Gpm6b   0.6032395        0 #> Ndufb11 0.5979667        0 #> Pcsk1n  0.6910833        0 #> Tspan7  0.6856153        0 #> Uba1    0.6154512        0 #> Sh3bgrl 0.6500207        0 #> Maged1  0.6095045        0 #> Mt3     0.4722671        0 #> Zrsr2   0.5845943        0 #>  #> [[5]] #>                AR fdr_disp #> Bex2    0.6559426        0 #> Gpm6b   0.6250239        0 #> Ndufb11 0.6090887        0 #> Pcsk1n  0.6901007        0 #> Tspan7  0.6268899        0 #> Uba1    0.6338756        0 #> Sh3bgrl 0.6493541        0 #> Maged1  0.6356134        0 #> Mt3     0.5320794        0 #> Zrsr2   0.6386275        0 gene = \"Bex2\" exp_theta <- plot_exp_disp(bb_var_res[[1]], gene = gene)  #generating data frame for plotting plot_data <- makedf(a1_mat[[1]], tot_mat[[1]], gene = gene) ar_dist <- plot_distr(plot_data,  gene = gene) grid.arrange(exp_theta, ar_dist, ncol = 2) bb_var_res[[1]][c(\"Bex2\", \"Npm1\"), c(\"AR\", \"tot_gene_mean\", \"fdr_disp\")] gene = \"Npm1\" exp_theta <- plot_exp_disp(bb_var_res[[1]], gene = gene)  #generating data frame for plotting plot_data <- makedf(a1_mat[[1]], tot_mat[[1]], gene = gene) ar_dist <- plot_distr(plot_data,  gene = gene) grid.arrange(exp_theta, ar_dist, ncol = 2)"},{"path":[]},{"path":"https://ewonglab.github.io/ASPEN/articles/differential_ASE.html","id":"introduction","dir":"Articles","previous_headings":"Identifying Changes in Allelic Ratio Distribution (Mean or Variance) Across Groups","what":"Introduction","title":"differential_ASE","text":"###Setup","code":"#loading libraries suppressPackageStartupMessages({     library(ASPEN)     library(gridExtra)     library(openxlsx)     library(SingleCellExperiment)     library(scran)     library(huxtable) })"},{"path":"https://ewonglab.github.io/ASPEN/articles/differential_ASE.html","id":"loading-allele-specifc-count-data","dir":"Articles","previous_headings":"Identifying Changes in Allelic Ratio Distribution (Mean or Variance) Across Groups","what":"Loading allele-specifc count data","title":"differential_ASE","text":"vignettes, use mouse brain organoids data CastB6 hybrids (Medina-Cano, 2025). Pseudotime data estimated using palantir (Setty, 2019). example, focus three cell types representing early neurodevelopment:: radial glial cells (RGCs), intermediate progenitors cells (IPCs), deep layer neurons (cortical neurons). first select cell barcodes pseudotime value assigned. Since ASPEN accepts discrete groups, divide pseudotime vector five equal-sized bins. Checking number cells per pseudotime bin","code":"data(\"Bl6_Cast_a1\") data(\"Bl6_Cast_tot\") #load_file <- system.file(\"extdata\", \"Bl6Cast_cell_annot.xlsx\", package = \"ASPEN\") #cell_annot <- read.xlsx(load_file, rowNames = T) #loading pseudotime assignment load_time <- system.file(\"extdata\", \"pseudotime_Bl6Cast.xlsx\", package = \"ASPEN\") pseudotime <- read.xlsx(load_time, rowNames = T) print_md(as_huxtable(head(pseudotime))) #> ------------------------------------ #>  cell_id                       time  #> ------------------------ ----------- #>  clone2_TACAGGTCAGAGATGC     0.0142  #>                                      #>  clone1_CTCATGCAGAGATCGC     0.0162  #>                                      #>  clone1_TAGGTACTCAACCCGG     0.0167  #>                                      #>  clone2_GACAGCCCAAACGTGG     0.0167  #>                                      #>  clone1_TCCGATCAGTGGTCAG     0.0176  #>                                      #>  clone2_AATCACGTCCCTCTAG     0.0182  #> ------------------------------------ Cast_B6_a1 <- Cast_B6_a1[,colnames(Cast_B6_a1) %in% pseudotime$cell_id] Cast_B6_tot <- Cast_B6_tot[,colnames(Cast_B6_tot) %in% pseudotime$cell_id] pseudotime <- pseudotime[match(colnames(Cast_B6_tot),                                 pseudotime$cell_id),] pseudotime$group <- cut(pseudotime$time,                          breaks=c(quantile(pseudotime$time,                                            probs = seq(0, 1, by = 0.2)))) #by default the [`cut()`] function skips the first observation - imputing the value manually pseudotime$group[is.na(pseudotime$group)] <- levels(pseudotime$group)[1] #adding cell ids to pseudotime obejct row names rownames(pseudotime) <- pseudotime$cell_id print_md(as_huxtable(head(pseudotime))) #> ------------------------------------------------ #>  cell_id                    time group           #> ------------------------ ------- --------------- #>  clone1_AAACGAACATGTGCTA   0.546 (0.541,0.566]   #>                                                  #>  clone1_AAAGAACCACCTGCAG   0.802 (0.594,1]       #>                                                  #>  clone1_AAAGGATGTACTCCGG   0.667 (0.594,1]       #>                                                  #>  clone1_AAAGTCCAGCAATTCC   0.608 (0.594,1]       #>                                                  #>  clone1_AAAGTCCAGTGCTACT   0.654 (0.594,1]       #>                                                  #>  clone1_AAAGTCCGTAACCCGC  0.0415 (0.0142,0.424]  #> ------------------------------------------------ print_md(as_huxtable(table(pseudotime$group))) #> --------------------------- #>                 V1          #> --------------- ----------- #>  (0.0142,0.424] 685         #>                             #>   (0.424,0.541] 685         #>                             #>   (0.541,0.566] 684         #>                             #>   (0.566,0.594] 685         #>                             #>       (0.594,1] 685         #> ---------------------------"},{"path":"https://ewonglab.github.io/ASPEN/articles/differential_ASE.html","id":"counts-normalisation","dir":"Articles","previous_headings":"Identifying Changes in Allelic Ratio Distribution (Mean or Variance) Across Groups","what":"Counts normalisation","title":"differential_ASE","text":"first normalize raw single-cell counts using [computeSumFactors()] function scran package (Lun, et al. 2016). create SingleCellExperiment object using total reference allele count matrices. Lowly expressed genes (expressed less 10 cells) removed. reference allele total counts normalized parallel using size factor estimates.","code":"ase_sce <- SingleCellExperiment(assays = list(a1 = as.matrix(Cast_B6_a1),                                               tot = as.matrix(Cast_B6_tot))) #removing lowly expressed genes ase_sce <- ase_sce[rowSums(assays(ase_sce)[['tot']] > 1) >= 10, ] dim(ase_sce) #> [1] 1546 3424 #adding sample id to the metadata colData(ase_sce)$replicate <- gsub(\"_.*\", \"\", rownames(colData(ase_sce)))  #calculate size factors ase_sce <- computeSumFactors(ase_sce,                               clusters=colData(ase_sce)$replicate, assay.type = \"tot\") #normalizing counts ase_sce  <- logNormCounts(ase_sce,                            size.factors = colData(ase_sce)$sizeFactor,                           log = NULL, transform = \"none\", assay.type = \"tot\", name = \"tot_norm\")  #normalizing reference counts by the same size factors ase_sce  <- logNormCounts(ase_sce,                            size.factors = colData(ase_sce)$sizeFactor,                           log = NULL, transform = \"none\", assay.type = \"a1\", name = \"a1_norm\")  #checking that normalised counts assays are added to the SingleCellExperiment object ase_sce@assays #> An object of class \"SimpleAssays\" #> Slot \"data\": #> List of length 4 #> names(4): a1 tot tot_norm a1_norm"},{"path":"https://ewonglab.github.io/ASPEN/articles/differential_ASE.html","id":"estimating-beta-binomial-parameters","dir":"Articles","previous_headings":"Identifying Changes in Allelic Ratio Distribution (Mean or Variance) Across Groups","what":"Estimating beta-binomial parameters","title":"differential_ASE","text":"start estimating beta-binomial distribution parameters gene across cells. estimates used calculate likelihood null hypothesis H0H_0, assumes differences allelic ratio across time points.","code":"#extracting raw counts which will be used to estimate the model parameters tot_mat <- as.matrix(assays(ase_sce)[['tot']]) a1_mat <- as.matrix(assays(ase_sce)[['a1']])  global_params <- estim_bbparams(a1_mat, tot_mat, min_cells = 5, cores = 6)"},{"path":"https://ewonglab.github.io/ASPEN/articles/differential_ASE.html","id":"defining-lowly-expressed-genes","dir":"Articles","previous_headings":"Identifying Changes in Allelic Ratio Distribution (Mean or Variance) Across Groups","what":"Defining lowly expressed genes","title":"differential_ASE","text":"ASPEN applies shrinkage selectively - genes low dispersion moderated allelic imbalance evaluated unadjusted values. Genes stable dispersion determined based residuals dispersion modelling step. ASPEN calculates meadian absolute deviation-squared (MAD2{MAD}^2), used cut-.","code":"min_cutoff <- calc_mad(global_params) min_cutoff #> [1] 0.001777655"},{"path":"https://ewonglab.github.io/ASPEN/articles/differential_ASE.html","id":"estimate-appropriate-shrinkage-parameters","dir":"Articles","previous_headings":"Identifying Changes in Allelic Ratio Distribution (Mean or Variance) Across Groups","what":"Estimate appropriate shrinkage parameters","title":"differential_ASE","text":"estimate shrinkage parameters, NN δ\\delta, cell type separately. option, genes low dispersion can excluded estimation setting minimum cut-value thetaFilter parameter","code":"set.seed(1001011) shrink_pars <- estim_delta(global_params, thetaFilter = round(min_cutoff,3)) shrink_pars #>     N delta  #>    17    19"},{"path":"https://ewonglab.github.io/ASPEN/articles/differential_ASE.html","id":"performing-bayesian-shrinkage","dir":"Articles","previous_headings":"Identifying Changes in Allelic Ratio Distribution (Mean or Variance) Across Groups","what":"Performing Bayesian shrinkage","title":"differential_ASE","text":"Visualizing local model fit shrunk dispersion estimates  alternative hypothesis, assume ASE distributions differ time points. obtain group-level estimates, split count matrices time point assignment repeat beta-binomial parameter estimation group. apply Bayesian shrinkage group-level beta-binomial parameter estimates. Visualizing local model fit group-level observations treated independent variables.  ASPEN expects group level estimates gene. prepare , add gene name group identifier estimates object, combine results single data frame split data frame gene. shrunk_params_gene object list element contains group-level estimates single gene.","code":"global_shrunk <- correct_theta(global_params,                                 delta_set = shrink_pars[1],                                 N_set = shrink_pars[2],                                 thetaFilter = min_cutoff) fit_plot <- plot_disp_fit_theta(global_shrunk, midpoint = 200) shrunk_plot <- plot_disp(global_shrunk) +    geom_hline(yintercept = log(1e-03), linetype = \"dashed\", linewidth = 1)    grid.arrange(fit_plot, shrunk_plot, ncol = 2) #> Warning: Removed 31 rows containing non-finite outside the scale range #> (`stat_pointdensity()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_line()`). #> Removed 1 row containing missing values or values outside the scale range #> (`geom_line()`). #splitting pseudotime assignment by group psedotime_bins <- split(pseudotime, f = pseudotime$group)   ase_sce_bybin <- list() for (i in 1:length(psedotime_bins)){     ase_sce_bybin[[i]] <- ase_sce[,rownames(psedotime_bins[[i]])] }  #only using genes that are expressed in at least 10 cells  ase_sce_bybin <- lapply(ase_sce_bybin, function(q) q[rowSums(assays(q)[['tot']] > 1) >= 10, ])   #extracting total counts for each pseudotime bin tot_mat_bybin <- lapply(ase_sce_bybin, function(q) as.matrix(assays(q)[['tot']]))  #extracting reference allele counts a1_mat_bybin <- lapply(ase_sce_bybin, function(q) as.matrix(assays(q)[['a1']])) #selecting genes that matched filtering criteria a1_mat_bybin <- mapply(function(p,q) p[rownames(q), ], a1_mat_bybin, tot_mat_bybin, SIMPLIFY = F) #Estimating distribution parameters group_params <- mapply(function(p, q) estim_bbparams(p, q, min_cells = 5, cores = 6),                        a1_mat_bybin, tot_mat_bybin, SIMPLIFY = F)  #removing groups where optim did not converge #group_params <- group_params[!is.na(group_params$bb_theta),] #group_params <- as.data.frame(group_params) shrunk_group_params <- lapply(group_params, function(q)                                              correct_theta(q,                                                            delta_set = shrink_pars[1],                                                            N_set = shrink_pars[2],                                                            thetaFilter = min_cutoff)) samples <- list(levels(pseudotime$group)[1],                 levels(pseudotime$group)[2],                 levels(pseudotime$group)[3],                 levels(pseudotime$group)[4],                 levels(pseudotime$group)[5])  p_disp <- mapply(function(p,q) plot_disp_fit_theta(p, midpoint = 300) +                                labs(subtitle = q) +                                geom_hline(yintercept = log(min_cutoff), linetype = \"dashed\"),                  shrunk_group_params, samples, SIMPLIFY = F) do.call(grid.arrange, c(p_disp, ncol = 3)) #> Warning: Removed 86 rows containing non-finite outside the scale range #> (`stat_pointdensity()`). #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_line()`). #> Warning: Removed 91 rows containing non-finite outside the scale range #> (`stat_pointdensity()`). #> Warning: Removed 71 rows containing non-finite outside the scale range #> (`stat_pointdensity()`). #> Warning: Removed 79 rows containing non-finite outside the scale range #> (`stat_pointdensity()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_line()`). #> Warning: Removed 76 rows containing non-finite outside the scale range #> (`stat_pointdensity()`). shrunk_group_params <- mapply(function(p,q) {p$group <- q;                                              p$gene <- rownames(p);                                              return(p)}, shrunk_group_params, samples, SIMPLIFY = F)  shrunk_params_comb <- do.call(rbind, shrunk_group_params) shrunk_params_gene <- split(shrunk_params_comb, f = shrunk_params_comb$gene)"},{"path":"https://ewonglab.github.io/ASPEN/articles/differential_ASE.html","id":"test-for-changes-in-ase-mean-across-time-points","dir":"Articles","previous_headings":"Identifying Changes in Allelic Ratio Distribution (Mean or Variance) Across Groups","what":"Test for changes in ASE mean across time points","title":"differential_ASE","text":"ASPEN performs test genes valid beta-binomial estimates. Genes beta-binomial parameters obtained excluded output. Normalized counts used detect changes allelic ratio mean across pseudotime bins. input matrices contain cells. group identifiers metadata must match exactly group identifiers beta-binomial estimates list (shrunk_params_gene). default, ASPEN ensures number informative cells — meeting minimum coverage threshold — across groups. genes meet quality cut-threshold (: minimum 5 cells least 5 mapped reads per cell), inference performed. genes NA values relevant output columns. remove genes calculating false discovery rate (FDR):","code":"#extracting normalised counts which will be used for testing a1_norm <- as.matrix(round(assays(ase_sce)[['a1_norm']])) tot_norm <- as.matrix(round(assays(ase_sce)[['tot_norm']]))  change_mean <- group_mean(a1_norm, tot_norm,                           metadata = pseudotime, split.var = \"group\",                          min_counts = 5, min_cells = 5,                           estimates = global_shrunk,                          estimates_group = shrunk_params_gene,                          equalGroups = TRUE) change_mean <- change_mean[!is.na(change_mean$pval),] change_mean$fdr_mean <- p.adjust(change_mean$pval, method = \"fdr\") head(change_mean[order(change_mean$fdr_mean),], n  = 10) gene <- \"Dbi\" #generating data frame for plotting  simul_data <- make_plotdf_simul(Cast_B6_a1, Cast_B6_tot, gene = gene, estimates_group = shrunk_params_gene,                                 metadata = pseudotime, order.by = \"time\", split.var = \"group\")  plot_distr(simul_data, gene = gene, add.density = FALSE, min_counts = 0) +    geom_hline(yintercept = c(simul_data$Index[match(unique(simul_data$group), simul_data$group)][-1])) +   labs(y = \"Ordered pseudotime\")"},{"path":"https://ewonglab.github.io/ASPEN/articles/differential_ASE.html","id":"test-for-changes-in-ase-variance-over-time","dir":"Articles","previous_headings":"Identifying Changes in Allelic Ratio Distribution (Mean or Variance) Across Groups","what":"Test for changes in ASE variance over time","title":"differential_ASE","text":"changes allelic variation groups can identifying [group_var()]. function requires specifying global mean allelic ratio (passed mean_null parameter), used evaluating null alternative hypotheses.","code":"change_var <- group_var(a1_mat, tot_mat,                           metadata = pseudotime, split.var = \"group\",                          min_counts = 5, min_cells = 5,                           mean_null = 0.5,                          estimates = global_shrunk,                          estimates_group = shrunk_params_gene,                          equalGroups = TRUE) #variance changes overtime, whilst keeping the mean AR constant  change_var <- change_var[!is.na(change_var$pval),] change_var$fdr_var <- p.adjust(change_var$pval_var, method = \"fdr\") change_var[order(change_var$fdr_var)[11:20],] gene <- \"Tubb3\" #generating data frame for plotting  simul_data <- make_plotdf_simul(Cast_B6_a1, Cast_B6_tot, gene = gene, estimates_group = shrunk_params_gene,                                 metadata = pseudotime, order.by = \"time\", split.var = \"group\")  plot_distr(simul_data, gene = gene, add.density = FALSE, min_counts = 0) +    geom_hline(yintercept = c(simul_data$Index[match(unique(simul_data$group), simul_data$group)][-1])) +   labs(y = \"Ordered pseudotime\")"},{"path":"https://ewonglab.github.io/ASPEN/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Veronika Petrova. Author, maintainer. Muqing Niu. Author. Thomas Vierbuchen. Author. Emily Wong. Author.","code":""},{"path":"https://ewonglab.github.io/ASPEN/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Petrova V, Niu M, Vierbuchen T, Wong E (2025). ASPEN: Quantifying allele-specific expression (ASE) single-cell RNA-seq. R package version 1.2.4, https://ewonglab.github.io/ASPEN/.","code":"@Manual{,   title = {ASPEN: Quantifying allele-specific expression (ASE) in single-cell RNA-seq},   author = {Veronika Petrova and Muqing Niu and Thomas Vierbuchen and Emily Wong},   year = {2025},   note = {R package version 1.2.4},   url = {https://ewonglab.github.io/ASPEN/}, }"},{"path":"https://ewonglab.github.io/ASPEN/index.html","id":"aspen","dir":"","previous_headings":"","what":"Quantifying allele-specific expression (ASE) in single-cell RNA-seq","title":"Quantifying allele-specific expression (ASE) in single-cell RNA-seq","text":"statistical method analyze allele-specific expression (ASE) data. ASPEN estimates beta-binomial parameters, mean dispersion, allelic counts. ASPEN models allelic dispersion function total gene expression uses Bayesian hierarchical model shrink estimated dispersion towards expected one, thereby stabilizing estimates reducing impact spurious variability. ASPEN can used - identify genes allelic imbalance (mean allelic ratio deviating theoretical value 0.5); - identify genes allelic dispersion different expected one genes similar expression levels; - identify genes changes allelic distribution time; - identify genes changes allelic variation time.","code":""},{"path":"https://ewonglab.github.io/ASPEN/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Quantifying allele-specific expression (ASE) in single-cell RNA-seq","text":"","code":"if(!require(devtools)) install.packages(\"devtools\") library(devtools)  devtools::install_github(\"ewonglab/ASPEN\")"},{"path":"https://ewonglab.github.io/ASPEN/reference/bb_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Likelihood ratio test for mean allelic imbalance (per gene) — bb_mean","title":"Likelihood ratio test for mean allelic imbalance (per gene) — bb_mean","text":"Tests H0: mu = mu0 (global/theoretical mean) vs H1: mu = gene-specific mean, using beta-binomial likelihoods shrunk dispersion correct_theta().","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/bb_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likelihood ratio test for mean allelic imbalance (per gene) — bb_mean","text":"","code":"bb_mean(   a1_counts,   tot_counts,   estimates,   glob_params,   min_cells = 5,   min_counts = 5,   batch = NULL,   metadata = NULL,   estimates_group = NULL )"},{"path":"https://ewonglab.github.io/ASPEN/reference/bb_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Likelihood ratio test for mean allelic imbalance (per gene) — bb_mean","text":"a1_counts Integer matrix (genes x cells): allele-1 counts. tot_counts Integer matrix (genes x cells): total counts. (dimenstions rownames a1_counts). estimates Data frame correct_theta() glob_params Named vector/list elements alpha, beta, mu, theta returned glob_disp(). min_cells Integer >= 1. Minimum number cells per gene fit (default 5). Genes number cells less min_cells excluded estimation. min_counts Integer >= 0. Minimum reads per cell include (default 0). Cells number mapped reads less min_counts excluded estimation batch Optional string: column name metadata identifying batches. (batch correction required) metadata Optional metadata object containing cell level information (batch identifier must one column cell metadata) estimates_group Optional object containing initial beta-binomial parameter estimates correction performed batch separately","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/bb_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Likelihood ratio test for mean allelic imbalance (per gene) — bb_mean","text":"","code":"bb_mean(a1_counts,         tot_counts,         estimates,         glob_params,         min_cells = 5,         min_counts = 5) #> Error: object 'a1_counts' not found"},{"path":"https://ewonglab.github.io/ASPEN/reference/bb_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Test to evaluate deviation from the expected level of allelic variation for genes with similar expression. Performs a permutation test between H_0: gene's dispersion is the same as the common (expected) dispersion. H_1: The stabilized (shrunk) dispersion is not the same as the common dispersion. — bb_var","title":"Test to evaluate deviation from the expected level of allelic variation for genes with similar expression. Performs a permutation test between H_0: gene's dispersion is the same as the common (expected) dispersion. H_1: The stabilized (shrunk) dispersion is not the same as the common dispersion. — bb_var","text":"Test evaluate deviation expected level allelic variation genes similar expression. Performs permutation test H_0: gene's dispersion common (expected) dispersion. H_1: stabilized (shrunk) dispersion common dispersion.","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/bb_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test to evaluate deviation from the expected level of allelic variation for genes with similar expression. Performs a permutation test between H_0: gene's dispersion is the same as the common (expected) dispersion. H_1: The stabilized (shrunk) dispersion is not the same as the common dispersion. — bb_var","text":"","code":"bb_var(   a1_counts,   tot_counts,   estimates,   estimates_group = NULL,   min_cells = 5,   min_counts = 5,   batch = NULL,   metadata = NULL,   n_pmt = 500,   n_sim = 500 )"},{"path":"https://ewonglab.github.io/ASPEN/reference/bb_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test to evaluate deviation from the expected level of allelic variation for genes with similar expression. Performs a permutation test between H_0: gene's dispersion is the same as the common (expected) dispersion. H_1: The stabilized (shrunk) dispersion is not the same as the common dispersion. — bb_var","text":"a1_counts Integer matrix (genes x cells): allele-1 counts. tot_counts Integer matrix (genes x cells): total counts (dimenstions rownames a1_counts). estimates Data frame correct_theta() estimates_group Optional object containing initial beta-binomial parameter estimates correction performed batch separately min_cells Integer >= 1. Minimum number cells per gene fit (default 5). Genes number cells less min_cells excluded estimation. min_counts Integer >= 0. Minimum reads per cell include (default 0). Cells number mapped reads less min_counts excluded estimation batch Optional string: column name metadata identifying batches. (batch correction required) metadata Optional metadata object containing cell level information (batch identifier must one column cell metadata) n_pmt Integer. Number permutations (<= n_sim.) n_sim Integer. Number simulated replicates.","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/bb_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test to evaluate deviation from the expected level of allelic variation for genes with similar expression. Performs a permutation test between H_0: gene's dispersion is the same as the common (expected) dispersion. H_1: The stabilized (shrunk) dispersion is not the same as the common dispersion. — bb_var","text":"","code":"bb_var() #> Error in eval(assertion, env): argument \"a1_counts\" is missing, with no default"},{"path":"https://ewonglab.github.io/ASPEN/reference/calc_mad.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculating MAD^2 on the dispersion trend residuals — calc_mad","title":"Calculating MAD^2 on the dispersion trend residuals — calc_mad","text":"Calculating MAD^2 dispersion trend residuals","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/calc_mad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculating MAD^2 on the dispersion trend residuals — calc_mad","text":"","code":"calc_mad(estimates)"},{"path":"https://ewonglab.github.io/ASPEN/reference/calc_mad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculating MAD^2 on the dispersion trend residuals — calc_mad","text":"estimates Data frame estim_bbparams()","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/calc_mad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculating MAD^2 on the dispersion trend residuals — calc_mad","text":"","code":"calc_mad(estimates) #> Error: object 'estimates' not found"},{"path":"https://ewonglab.github.io/ASPEN/reference/correct_theta.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits a local regression model with dispersion as a function of total gene counts. Predicted values are the expected dispersion for genes with similar expression levels The initial dispersion estimates are shrunk towards the trend — correct_theta","title":"Fits a local regression model with dispersion as a function of total gene counts. Predicted values are the expected dispersion for genes with similar expression levels The initial dispersion estimates are shrunk towards the trend — correct_theta","text":"Fits local regression model dispersion function total gene counts. Predicted values expected dispersion genes similar expression levels initial dispersion estimates shrunk towards trend","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/correct_theta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits a local regression model with dispersion as a function of total gene counts. Predicted values are the expected dispersion for genes with similar expression levels The initial dispersion estimates are shrunk towards the trend — correct_theta","text":"","code":"correct_theta(   estimates,   delta_set = 50,   N_set = 30,   thetaFilter = NULL,   shrinkAll = FALSE )"},{"path":"https://ewonglab.github.io/ASPEN/reference/correct_theta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits a local regression model with dispersion as a function of total gene counts. Predicted values are the expected dispersion for genes with similar expression levels The initial dispersion estimates are shrunk towards the trend — correct_theta","text":"estimates Data frame estim_bbparams() delta_set Delta parameter (numeric > 0). N_set N parameter (numeric > 0). thetaFilter Optional numeric threshold; genes bb_theta < thetaFilter excluded. Genes dispersion set threshold excluded shrinking procedure. shrinkAll Logical. TRUE, apply shrinkage genes (default FALSE).","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/correct_theta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits a local regression model with dispersion as a function of total gene counts. Predicted values are the expected dispersion for genes with similar expression levels The initial dispersion estimates are shrunk towards the trend — correct_theta","text":"","code":"correct_theta(estimates, delta_set = 50, N_set = 30, thetaFilter = 1e-3, shrinkAll = FALSE) #> Error: object 'estimates' not found"},{"path":"https://ewonglab.github.io/ASPEN/reference/estim_bbparams.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate beta-binomial distribution parameters per gene. The users can remove low abundant or low expressed genes through quality control parameters min_counts and min_cells. — estim_bbparams","title":"Estimate beta-binomial distribution parameters per gene. The users can remove low abundant or low expressed genes through quality control parameters min_counts and min_cells. — estim_bbparams","text":"Estimate beta-binomial distribution parameters per gene. users can remove low abundant low expressed genes quality control parameters min_counts min_cells.","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/estim_bbparams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate beta-binomial distribution parameters per gene. The users can remove low abundant or low expressed genes through quality control parameters min_counts and min_cells. — estim_bbparams","text":"","code":"estim_bbparams(   a1_counts,   tot_counts,   min_counts = 0,   min_cells = 5,   cores = NULL )"},{"path":"https://ewonglab.github.io/ASPEN/reference/estim_bbparams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate beta-binomial distribution parameters per gene. The users can remove low abundant or low expressed genes through quality control parameters min_counts and min_cells. — estim_bbparams","text":"a1_counts Integer matrix (genes x cells): allele-1 counts. tot_counts Integer matrix (genes x cells): total counts (dimenstions rownames a1_counts). min_counts Integer >= 0. Minimum reads per cell include (default 0). Cells number mapped reads less min_counts excluded estimation min_cells Integer >= 1. Minimum number cells per gene fit (default 5). Genes number cells less min_cells excluded estimation. cores number processing cores (default 1).","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/estim_bbparams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate beta-binomial distribution parameters per gene. The users can remove low abundant or low expressed genes through quality control parameters min_counts and min_cells. — estim_bbparams","text":"","code":"estim_bbparams(a1_counts,               tot_counts,               min_counts = 0,               min_cells = 5,               cores = NULL) #> Error: object 'a1_counts' not found"},{"path":"https://ewonglab.github.io/ASPEN/reference/estim_delta.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimating appropriate tuning paramaters delta and the number of degrees of freedom, N. We assume that dispersion follows Gamma distribution. Appropriate shrinkage is selected based on the MLE of the the difference between fitted dispersion and shrunk dispersion — estim_delta","title":"Estimating appropriate tuning paramaters delta and the number of degrees of freedom, N. We assume that dispersion follows Gamma distribution. Appropriate shrinkage is selected based on the MLE of the the difference between fitted dispersion and shrunk dispersion — estim_delta","text":"Estimating appropriate tuning paramaters delta number degrees freedom, N. assume dispersion follows Gamma distribution. Appropriate shrinkage selected based MLE difference fitted dispersion shrunk dispersion","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/estim_delta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimating appropriate tuning paramaters delta and the number of degrees of freedom, N. We assume that dispersion follows Gamma distribution. Appropriate shrinkage is selected based on the MLE of the the difference between fitted dispersion and shrunk dispersion — estim_delta","text":"","code":"estim_delta(estimates, thetaFilter = NULL)"},{"path":"https://ewonglab.github.io/ASPEN/reference/estim_delta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimating appropriate tuning paramaters delta and the number of degrees of freedom, N. We assume that dispersion follows Gamma distribution. Appropriate shrinkage is selected based on the MLE of the the difference between fitted dispersion and shrunk dispersion — estim_delta","text":"estimates Data frame estim_bbparams() thetaFilter Optional numeric threshold; genes bb_theta < thetaFilter excluded. Genes dispersion set threshold excluded shrinking procedure.","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/estim_delta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimating appropriate tuning paramaters delta and the number of degrees of freedom, N. We assume that dispersion follows Gamma distribution. Appropriate shrinkage is selected based on the MLE of the the difference between fitted dispersion and shrunk dispersion — estim_delta","text":"","code":"estim_delta() #> Error in eval(assertion, env): argument \"estimates\" is missing, with no default"},{"path":"https://ewonglab.github.io/ASPEN/reference/geBoxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Boxplot of allele-specific expression — geBoxplot","title":"Boxplot of allele-specific expression — geBoxplot","text":"Boxplot allele-specific expression","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/geBoxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boxplot of allele-specific expression — geBoxplot","text":"","code":"geBoxplot(plot_data, allele1 = \"allele1\", allele2 = \"allele2\")"},{"path":"https://ewonglab.github.io/ASPEN/reference/geBoxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boxplot of allele-specific expression — geBoxplot","text":"plot_data output make_plotdf_simul allele1 names non-reference strain","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/geBoxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boxplot of allele-specific expression — geBoxplot","text":"","code":"geBoxplot() #> Error in geBoxplot(): argument \"plot_data\" is missing, with no default"},{"path":"https://ewonglab.github.io/ASPEN/reference/glob_disp.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimates global beta-binomial distribution parameters on all genes together to evaluate the degree of skewness towards the reference allele. For the estimation, genes located on the sex chromosomes and imprinted genes are excluded — glob_disp","title":"Estimates global beta-binomial distribution parameters on all genes together to evaluate the degree of skewness towards the reference allele. For the estimation, genes located on the sex chromosomes and imprinted genes are excluded — glob_disp","text":"Estimates global beta-binomial distribution parameters genes together evaluate degree skewness towards reference allele. estimation, genes located sex chromosomes imprinted genes excluded","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/glob_disp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimates global beta-binomial distribution parameters on all genes together to evaluate the degree of skewness towards the reference allele. For the estimation, genes located on the sex chromosomes and imprinted genes are excluded — glob_disp","text":"","code":"glob_disp(a1_counts, tot_counts, genes.excl, min_counts = 5)"},{"path":"https://ewonglab.github.io/ASPEN/reference/glob_disp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimates global beta-binomial distribution parameters on all genes together to evaluate the degree of skewness towards the reference allele. For the estimation, genes located on the sex chromosomes and imprinted genes are excluded — glob_disp","text":"a1_counts Reference allele counts tot_counts Integer matrix (genes x cells): total counts (dimenstions rownames a1_counts). genes.excl Character vector gene IDs exclude (eg. sex chromosome imprinted genes) min_counts Integer >= 0. Minimum reads per cell include (default 0). Cells number mapped reads less min_counts excluded estimation","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/glob_disp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimates global beta-binomial distribution parameters on all genes together to evaluate the degree of skewness towards the reference allele. For the estimation, genes located on the sex chromosomes and imprinted genes are excluded — glob_disp","text":"","code":"glob_disp(a1_counts,           tot_counts,           genes.excl,           min_counts = 5) #> Error: object 'a1_counts' not found"},{"path":"https://ewonglab.github.io/ASPEN/reference/group_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs test to detect changes in allelic ratio distribution across discrete groups. — group_mean","title":"Performs test to detect changes in allelic ratio distribution across discrete groups. — group_mean","text":"Tests H0: groups share mean vs H1: allelic ratio means group-specific","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/group_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs test to detect changes in allelic ratio distribution across discrete groups. — group_mean","text":"","code":"group_mean(   a1_counts,   tot_counts,   metadata,   split.var = \"group\",   min_counts = 0,   min_cells = 5,   estimates,   estimates_group,   equalGroups = TRUE )"},{"path":"https://ewonglab.github.io/ASPEN/reference/group_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs test to detect changes in allelic ratio distribution across discrete groups. — group_mean","text":"a1_counts Integer matrix (genes x cells): allele-1 counts. tot_counts Integer matrix (genes x cells): total counts. (dimenstions rownames a1_counts). metadata Metadata object containing cell level information (group identifier must one column cell metadata) split.var Name variable (group identifier) used split cells. min_counts Integer >= 0. Minimum reads per cell include (default 0). Cells number mapped reads less min_counts excluded estimation min_cells Integer >= 1. Minimum number cells per gene fit (default 5). Genes number cells less min_cells excluded estimation. estimates Data frame correct_theta() estimates_group list element data frame group-level betabinomial estimates corrected dispersion gene equalGroups Controls equal number cells groups (default TRUE)","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/group_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs test to detect changes in allelic ratio distribution across discrete groups. — group_mean","text":"","code":"group_mean() #> Error in group_mean(): argument \"estimates_group\" is missing, with no default"},{"path":"https://ewonglab.github.io/ASPEN/reference/group_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs test to detect changes in allelic ratio variation across descrete groups. — group_var","title":"Performs test to detect changes in allelic ratio variation across descrete groups. — group_var","text":"Tests H0: dispersion change groups vs H1: dispersion group-specific","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/group_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs test to detect changes in allelic ratio variation across descrete groups. — group_var","text":"","code":"group_var(   a1_counts,   tot_counts,   metadata,   split.var = \"group\",   min_counts = 0,   min_cells = 5,   mean_null = 0.5,   estimates,   estimates_group,   equalGroups = TRUE )"},{"path":"https://ewonglab.github.io/ASPEN/reference/group_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs test to detect changes in allelic ratio variation across descrete groups. — group_var","text":"a1_counts Integer matrix (genes x cells): allele-1 counts. tot_counts Integer matrix (genes x cells): total counts. (dimenstions rownames a1_counts). metadata Metadata object containing cell level information (group identifier must one column cell metadata) split.var Name variable (group identifier) used split cells. min_counts Integer >= 0. Minimum reads per cell include (default 0). Cells number mapped reads less min_counts excluded estimation min_cells Integer >= 1. Minimum number cells per gene fit (default 5). Genes number cells less min_cells excluded estimation. mean_null theoretical mean allelic ratio estimates Data frame correct_theta() estimates_group list element data frame group-level betabinomial estimates corrected dispersion gene equalGroups Controls equal number cells groups (default TRUE)","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/group_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs test to detect changes in allelic ratio variation across descrete groups. — group_var","text":"","code":"group_var() #> Error in group_var(): argument \"estimates_group\" is missing, with no default"},{"path":"https://ewonglab.github.io/ASPEN/reference/makedf.html","id":null,"dir":"Reference","previous_headings":"","what":"preparing data frame for plotting — makedf","title":"preparing data frame for plotting — makedf","text":"preparing data frame plotting","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/makedf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"preparing data frame for plotting — makedf","text":"","code":"makedf(   a1_counts,   tot_counts,   gene,   metadata = NULL,   order.by = \"time\",   split.var = \"group\" )"},{"path":"https://ewonglab.github.io/ASPEN/reference/makedf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"preparing data frame for plotting — makedf","text":"a1_counts Reference allele counts tot_counts Total gene counts counts gene gene symbol id, style used row names count matrices","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/makedf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"preparing data frame for plotting — makedf","text":"","code":"makedf() #> Error in makedf(): argument \"a1_counts\" is missing, with no default"},{"path":"https://ewonglab.github.io/ASPEN/reference/make_plotdf_simul.html","id":null,"dir":"Reference","previous_headings":"","what":"posterior counts simulated under the expected dispersion — make_plotdf_simul","title":"posterior counts simulated under the expected dispersion — make_plotdf_simul","text":"posterior counts simulated expected dispersion","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/make_plotdf_simul.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"posterior counts simulated under the expected dispersion — make_plotdf_simul","text":"","code":"make_plotdf_simul(   a1_counts,   tot_counts,   gene,   metadata,   split.var = \"group\",   order.by = \"time\",   estimates_group,   init.seed = 10001101 )"},{"path":"https://ewonglab.github.io/ASPEN/reference/make_plotdf_simul.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"posterior counts simulated under the expected dispersion — make_plotdf_simul","text":"a1_counts Reference allele counts tot_counts Total gene counts counts gene gene symbol id, style used row names count matrices metadata Metadata object containing cell level information. Metadata rownames must match column names count matrices. split.var Name variable used split cells. order.variable order allelic ratio estimates_group output estim_bbparams_bygroup() init.seed set seed value","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/make_plotdf_simul.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"posterior counts simulated under the expected dispersion — make_plotdf_simul","text":"","code":"make_plotdf_simul() #> Error in make_plotdf_simul(): argument \"a1_counts\" is missing, with no default"},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_disp.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot to visualize original and shrunk dispersion — plot_disp","title":"Plot to visualize original and shrunk dispersion — plot_disp","text":"Plot visualize original shrunk dispersion","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_disp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot to visualize original and shrunk dispersion — plot_disp","text":"","code":"plot_disp(param_reestim)"},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_disp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot to visualize original and shrunk dispersion — plot_disp","text":"param_reestim Data frame correct_theta()","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_disp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot to visualize original and shrunk dispersion — plot_disp","text":"","code":"plot_disp() #> Error in plot_disp(): argument \"param_reestim\" is missing, with no default"},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_disp_fit_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot to visualize allelic ratio modelled as a function of total gene counts — plot_disp_fit_mean","title":"Plot to visualize allelic ratio modelled as a function of total gene counts — plot_disp_fit_mean","text":"Plot visualize allelic ratio modelled function total gene counts","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_disp_fit_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot to visualize allelic ratio modelled as a function of total gene counts — plot_disp_fit_mean","text":"","code":"plot_disp_fit_mean(param_reestim, midpoint = 2000)"},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_disp_fit_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot to visualize allelic ratio modelled as a function of total gene counts — plot_disp_fit_mean","text":"param_reestim Data frame correct_theta()","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_disp_fit_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot to visualize allelic ratio modelled as a function of total gene counts — plot_disp_fit_mean","text":"","code":"plot_disp_fit_mean() #> Error in plot_disp_fit_mean(): argument \"param_reestim\" is missing, with no default"},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_disp_fit_theta.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot to visualize dispersion modelled as a function of total gene counts — plot_disp_fit_theta","title":"Plot to visualize dispersion modelled as a function of total gene counts — plot_disp_fit_theta","text":"Plot visualize dispersion modelled function total gene counts","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_disp_fit_theta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot to visualize dispersion modelled as a function of total gene counts — plot_disp_fit_theta","text":"","code":"plot_disp_fit_theta(param_reestim, midpoint = 2000)"},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_disp_fit_theta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot to visualize dispersion modelled as a function of total gene counts — plot_disp_fit_theta","text":"param_reestim Data frame correct_theta()","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_disp_fit_theta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot to visualize dispersion modelled as a function of total gene counts — plot_disp_fit_theta","text":"","code":"plot_disp_fit_theta() #> Error in plot_disp_fit_theta(): argument \"param_reestim\" is missing, with no default"},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_distr.html","id":null,"dir":"Reference","previous_headings":"","what":"plotting allelic ratio distribution — plot_distr","title":"plotting allelic ratio distribution — plot_distr","text":"plotting allelic ratio distribution","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_distr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotting allelic ratio distribution — plot_distr","text":"","code":"plot_distr(plot_data, gene, add.density = TRUE, min_counts = 0)"},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_distr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotting allelic ratio distribution — plot_distr","text":"plot_data output makedf gene gene symbol id, must match gene used generate data frame plotting","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_distr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotting allelic ratio distribution — plot_distr","text":"","code":"plot_distr() #> Error in plot_distr(): argument \"plot_data\" is missing, with no default"},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_exp_disp.html","id":null,"dir":"Reference","previous_headings":"","what":"plotting mean gene expression vs allelic dispersion — plot_exp_disp","title":"plotting mean gene expression vs allelic dispersion — plot_exp_disp","text":"plotting mean gene expression vs allelic dispersion","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_exp_disp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotting mean gene expression vs allelic dispersion — plot_exp_disp","text":"","code":"plot_exp_disp(param_estim, gene = gene)"},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_exp_disp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotting mean gene expression vs allelic dispersion — plot_exp_disp","text":"param_estim output bb_test_res correct_theta gene gene symbol id, style used row names count matrices","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_exp_disp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotting mean gene expression vs allelic dispersion — plot_exp_disp","text":"","code":"plot_exp_disp() #> Error in plot_exp_disp(): argument \"param_estim\" is missing, with no default"},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_glob_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot histogram of allelic ratio distribution across all genes with beta function based on alpha and beta global parameters — plot_glob_params","title":"Plot histogram of allelic ratio distribution across all genes with beta function based on alpha and beta global parameters — plot_glob_params","text":"Plot histogram allelic ratio distribution across genes beta function based alpha beta global parameters","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_glob_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot histogram of allelic ratio distribution across all genes with beta function based on alpha and beta global parameters — plot_glob_params","text":"","code":"plot_glob_params(a1_counts, tot_counts, glob_params, min_counts = 5)"},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_glob_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot histogram of allelic ratio distribution across all genes with beta function based on alpha and beta global parameters — plot_glob_params","text":"a1_counts Integer matrix (genes x cells): allele-1 counts. tot_counts Integer matrix (genes x cells): total counts (dimenstions rownames a1_counts). glob_params Named vector/list elements alpha, beta, mu, theta returned glob_disp(). min_counts Integer >= 0. Minimum reads per cell include (default 0). Cells number mapped reads less min_counts excluded","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_glob_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot histogram of allelic ratio distribution across all genes with beta function based on alpha and beta global parameters — plot_glob_params","text":"","code":"plot_glob_params(a1_counts,                  tot_counts,                  glob_params,                  min_counts = 5) #> Error: object 'a1_counts' not found"},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_MA.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting distribution of allelic ratio over mean expression — plot_MA","title":"Plotting distribution of allelic ratio over mean expression — plot_MA","text":"Plotting distribution allelic ratio mean expression","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_MA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting distribution of allelic ratio over mean expression — plot_MA","text":"","code":"plot_MA(res, fdr_var = FALSE, fdr_cutoff = 0.05, min_logFC = 1, glob_params)"},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_MA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting distribution of allelic ratio over mean expression — plot_MA","text":"res output file beta_binom_test fdr_var Binary parameter specify test fdr's plot (default: fdr_var = FALSE, allelic imbalance results used plotting ) fdr_cutoff numeric value fdr cut-use (default: fdr_cutoff = 0.05) min_logFC Log FC value use glob_params output glob_disp()","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_MA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting distribution of allelic ratio over mean expression — plot_MA","text":"","code":"plot_MA() #> Error in plot_MA(): argument \"res\" is missing, with no default"},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_theta_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Density plot comparing allelic ratio distribution under observed and expected dispersion — plot_theta_density","title":"Density plot comparing allelic ratio distribution under observed and expected dispersion — plot_theta_density","text":"Density plot comparing allelic ratio distribution observed expected dispersion","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_theta_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density plot comparing allelic ratio distribution under observed and expected dispersion — plot_theta_density","text":"","code":"plot_theta_density(plot_data)"},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_theta_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density plot comparing allelic ratio distribution under observed and expected dispersion — plot_theta_density","text":"plot_data output make_plotdf_simul","code":""},{"path":"https://ewonglab.github.io/ASPEN/reference/plot_theta_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Density plot comparing allelic ratio distribution under observed and expected dispersion — plot_theta_density","text":"","code":"plot_exp_disp() #> Error in plot_exp_disp(): argument \"param_estim\" is missing, with no default"}]
