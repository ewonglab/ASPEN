load_file <- system.file("extdata", "Bl6Cast_cell_annot.xlsx", package = "ASPEN")
cell_annot <- read.xlsx(load_file, rowNames = T)
data("Bl6_Cast_a1")
data("Bl6_Cast_tot")
#load_file <- system.file("extdata", "Bl6Cast_cell_annot.xlsx", package = "ASPEN")
#cell_annot <- read.xlsx(load_file, rowNames = T)
#loading pseudotime assignment
load_time <- system.file("extdata", "pseudotime_Bl6Cast.xlsx", package = "ASPEN")
pseudotime <- read.xlsx(load_time, rowNames = T)
print_md(as_huxtable(head(pseudotime)))
Bl6_Cast_a1 <- Bl6_Cast_a1[,colnames(Bl6_Cast_a1) %in% pseudotime$cell_id]
data("Bl6_Cast_a1")
data("Bl6_Cast_tot")
#loading required libraries
suppressPackageStartupMessages({
library(ASPEN)
library(gridExtra)
library(openxlsx)
library(knitr)
library(SingleCellExperiment)
library(scran)
library(huxtable)
})
data("Bl6_Cast_a1")
data("Bl6_Cast_tot")
load_file <- system.file("extdata", "Bl6_Cast_cell_annot.xlsx", package = "ASPEN")
cell_annot <- read.xlsx(load_file, rowNames = T)
#adding barcode id
cell_annot$cell_id <- paste(cell_annot$clone, cell_annot$cell_barcode, sep = "_")
print_md(as_huxtable(head(cell_annot)))
Cast_B6_a1 <- Cast_B6_a1[,colnames(Cast_B6_a1) %in% pseudotime$cell_id]
Cast_B6_tot <- Cast_B6_tot[,colnames(Cast_B6_tot) %in% pseudotime$cell_id]
pseudotime <- pseudotime[match(colnames(Cast_B6_tot),
pseudotime$cell_id),]
pseudotime$group <- cut(pseudotime$time,
breaks=c(quantile(pseudotime$time,
probs = seq(0, 1, by = 0.2))))
#by default the [`cut()`] function skips the first observation - imputing the value manually
pseudotime$group[is.na(pseudotime$group)] <- levels(pseudotime$group)[1]
#adding cell ids to pseudotime obejct row names
rownames(pseudotime) <- pseudotime$cell_id
print_md(head(pseudotime))
pseudotime <- pseudotime[match(colnames(Cast_B6_tot),
pseudotime$cell_id),]
pseudotime$group <- cut(pseudotime$time,
breaks=c(quantile(pseudotime$time,
probs = seq(0, 1, by = 0.2))))
#by default the [`cut()`] function skips the first observation - imputing the value manually
pseudotime$group[is.na(pseudotime$group)] <- levels(pseudotime$group)[1]
#adding cell ids to pseudotime obejct row names
rownames(pseudotime) <- pseudotime$cell_id
print_md(as_huxtable(head(pseudotime)))
print_md(as_huxtable(table(pseudotime$group)))
ase_sce <- SingleCellExperiment(assays = list(a1 = as.matrix(Cast_B6_a1),
tot = as.matrix(Cast_B6_tot)))
#removing lowly expressed genes
ase_sce <- ase_sce[rowSums(assays(ase_sce)[['tot']] > 1) >= 10, ]
print_md(dim(ase_sce))
#removing lowly expressed genes
ase_sce <- ase_sce[rowSums(assays(ase_sce)[['tot']] > 1) >= 10, ]
dim(ase_sce)
#adding sample id to the metadata
colData(ase_sce)$replicate <- gsub("_.*", "", rownames(colData(ase_sce)))
#calculate size factors
ase_sce <- computeSumFactors(ase_sce,
clusters=colData(ase_sce)$replicate, assay.type = "tot")
#normalizing counts
ase_sce  <- logNormCounts(ase_sce,
size.factors = colData(ase_sce)$sizeFactor,
log = NULL, transform = "none", assay.type = "tot", name = "tot_norm")
#normalizing reference counts by the same size factors
ase_sce  <- logNormCounts(ase_sce,
size.factors = colData(ase_sce)$sizeFactor,
log = NULL, transform = "none", assay.type = "a1", name = "a1_norm")
#checking that normalised counts assays are added to the SingleCellExperiment object
ase_sce@assays
#extracting raw counts which will be used to estimate the model parameters
tot_mat <- as.matrix(assays(ase_sce)[['tot']])
a1_mat <- as.matrix(assays(ase_sce)[['a1']])
global_params <- estim_bbparams(a1_mat, tot_mat, min_cells = 5, cores = 6)
min_cutoff <- calc_mad(global_params)
min_cutoff
set.seed(1001011)
shrink_pars <- estim_delta(global_params, thetaFilter = min_cutoff)
?estim_delta
set.seed(1001011)
shrink_pars <- estim_delta(global_params, thetaFilter = round(min_cutoff,3))
shrink_pars
global_shrunk <- correct_theta(global_params,
delta_set = shrink_pars[1],
N_set = shrink_pars[2],
thetaFilter = min_cutoff)
fit_plot <- plot_disp_fit_theta(global_shrunk, midpoint = 200)
shrunk_plot <- plot_disp(global_shrunk) +
geom_hline(yintercept = log(1e-03), linetype = "dashed", linewidth = 1)
grid.arrange(fit_plot, shrunk_plot, ncol = 2)
?round
floor(min_cutoff,3)
floor(min_cutoff)
floor(min_cutoff, digits = 3)
#splitting pseudotime assignment by group
psedotime_bins <- split(pseudotime, f = pseudotime$group)
ase_sce_bybin <- list()
for (i in 1:length(psedotime_bins)){
ase_sce_bybin[[i]] <- ase_sce[,rownames(psedotime_bins[[i]])]
}
#only using genes that are expressed in at least 10 cells
ase_sce_bybin <- lapply(ase_sce_bybin, function(q) q[rowSums(assays(q)[['tot']] > 1) >= 10, ])
#extracting total counts for each pseudotime bin
tot_mat_bybin <- lapply(ase_sce_bybin, function(q) as.matrix(assays(q)[['tot']]))
#extracting reference allele counts
a1_mat_bybin <- lapply(ase_sce_bybin, function(q) as.matrix(assays(q)[['a1']]))
#selecting genes that matched filtering criteria
a1_mat_bybin <- mapply(function(p,q) p[rownames(q), ], a1_mat_bybin, tot_mat_bybin, SIMPLIFY = F)
#Estimating distribution parameters
group_params <- mapply(function(p, q) estim_bbparams(p, q, min_cells = 5, cores = 6),
a1_mat_bybin, tot_mat_bybin, SIMPLIFY = F)
#removing groups where optim did not converge
#group_params <- group_params[!is.na(group_params$bb_theta),]
#group_params <- as.data.frame(group_params)
shrunk_group_params <- lapply(group_params, function(q)
correct_theta(q,
delta_set = shrink_pars[1],
N_set = shrink_pars[2],
thetaFilter = min_cutoff))
samples <- list(levels(pseudotime$group)[1],
levels(pseudotime$group)[2],
levels(pseudotime$group)[3],
levels(pseudotime$group)[4],
levels(pseudotime$group)[5])
p_disp <- mapply(function(p,q) plot_disp_fit_theta(p, midpoint = 300) +
labs(subtitle = q) +
geom_hline(yintercept = log(min_cutoff), linetype = "dashed"),
shrunk_group_params, samples, SIMPLIFY = F)
do.call(grid.arrange, c(p_disp, ncol = 5))
shrunk_group_params <- mapply(function(p,q) {p$group <- q;
p$gene <- rownames(p);
return(p)}, shrunk_group_params, samples, SIMPLIFY = F)
shrunk_params_comb <- do.call(rbind, shrunk_group_params)
shrunk_params_gene <- split(shrunk_params_comb, f = shrunk_params_comb$gene)
#extracting normalised counts which will be used for testing
a1_norm <- as.matrix(round(assays(ase_sce)[['a1_norm']]))
tot_norm <- as.matrix(round(assays(ase_sce)[['tot_norm']]))
change_mean <- group_mean(a1_norm, tot_norm,
metadata = pseudotime, split.var = "group",
min_counts = 5, min_cells = 5,
estimates = global_shrunk,
estimates_group = shrunk_params_gene,
equalGroups = TRUE)
View(change_mean)
change_mean <- change_mean[!is.na(change_mean$pval),]
pseudot_change$fdr_mean <- p.adjust(pseudot_change$pval, method = "fdr")
change_mean <- change_mean[!is.na(change_mean$pval),]
change_mean$fdr_mean <- p.adjust(change_mean$pval, method = "fdr")
View(change_mean)
change_var <- diff_var(a1_mat, tot_mat,
metadata = pseudotime, split.var = "group",
min_counts = 5, min_cells = 5,
mean_null = 0.5,
estimates = global_shrunk,
estimates_group = shrunk_params_gene,
equalGroups = TRUE)
change_var <- group_var(a1_mat, tot_mat,
metadata = pseudotime, split.var = "group",
min_counts = 5, min_cells = 5,
mean_null = 0.5,
estimates = global_shrunk,
estimates_group = shrunk_params_gene,
equalGroups = TRUE)
#variance changes overtime, whilst keeping the mean AR constant
pseudot_change$fdr_var <- p.adjust(pseudot_change$pval_var, method = "fdr")
#variance changes overtime, whilst keeping the mean AR constant
change_var <- change_var[!is.na(change_var$pval),]
change_var$fdr_var <- p.adjust(change_var$pval_var, method = "fdr")
gene <- "Cst3"
#generating data frame for plotting
#plot_data <- makedf(Cast_B6_a1, Cast_B6_tot, gene = gene, metadata = pseudotime, order.by = "time", split.var = "group")
simul_data <- make_plotdf_simul(Cast_B6_a1, Cast_B6_tot, gene = gene, estimates_group = group_params_list,
metadata = pseudotime, order.by = "time", split.var = "group")
gene <- "Cst3"
#generating data frame for plotting
#plot_data <- makedf(Cast_B6_a1, Cast_B6_tot, gene = gene, metadata = pseudotime, order.by = "time", split.var = "group")
simul_data <- make_plotdf_simul(Cast_B6_a1, Cast_B6_tot, gene = gene, estimates_group = shrunk_params_gene,
metadata = pseudotime, order.by = "time", split.var = "group")
plot_distr(simul_data, gene = gene, add.density = FALSE, min_counts = 0) +
geom_hline(yintercept = c(simul_data$Index[match(unique(simul_data$group), simul_data$group)][-1])) +
labs(y = "Ordered pseudotime")
plot_theta_density(simul_data)
change_mean <- change_mean[!is.na(change_mean$pval),]
change_mean$fdr_mean <- p.adjust(change_mean$pval, method = "fdr")
head(change_mean[order(change_mean$fdr_mean),])
change_mean <- change_mean[!is.na(change_mean$pval),]
change_mean$fdr_mean <- p.adjust(change_mean$pval, method = "fdr")
head(change_mean[order(change_mean$fdr_mean),], n  = 10)
gene <- "Dbi"
#generating data frame for plotting
simul_data <- make_plotdf_simul(Cast_B6_a1, Cast_B6_tot, gene = gene, estimates_group = shrunk_params_gene,
metadata = pseudotime, order.by = "time", split.var = "group")
plot_distr(simul_data, gene = gene, add.density = FALSE, min_counts = 0) +
geom_hline(yintercept = c(simul_data$Index[match(unique(simul_data$group), simul_data$group)][-1])) +
labs(y = "Ordered pseudotime")
#variance changes overtime, whilst keeping the mean AR constant
change_var <- change_var[!is.na(change_var$pval),]
change_var$fdr_var <- p.adjust(change_var$pval_var, method = "fdr")
head(change_var[order(change_var$fdr_mean),], n  = 10)
#variance changes overtime, whilst keeping the mean AR constant
change_var <- change_var[!is.na(change_var$pval),]
change_var$fdr_var <- p.adjust(change_var$pval_var, method = "fdr")
head(change_var[order(change_var$fdr_var),], n  = 10)
gene <- "Uchl1"
#generating data frame for plotting
simul_data <- make_plotdf_simul(Cast_B6_a1, Cast_B6_tot, gene = gene, estimates_group = shrunk_params_gene,
metadata = pseudotime, order.by = "time", split.var = "group")
plot_distr(simul_data, gene = gene, add.density = FALSE, min_counts = 0) +
geom_hline(yintercept = c(simul_data$Index[match(unique(simul_data$group), simul_data$group)][-1])) +
labs(y = "Ordered pseudotime")
gene <- "Stmn1"
#generating data frame for plotting
simul_data <- make_plotdf_simul(Cast_B6_a1, Cast_B6_tot, gene = gene, estimates_group = shrunk_params_gene,
metadata = pseudotime, order.by = "time", split.var = "group")
plot_distr(simul_data, gene = gene, add.density = FALSE, min_counts = 0) +
geom_hline(yintercept = c(simul_data$Index[match(unique(simul_data$group), simul_data$group)][-1])) +
labs(y = "Ordered pseudotime")
gene <- "Ubb"
#generating data frame for plotting
simul_data <- make_plotdf_simul(Cast_B6_a1, Cast_B6_tot, gene = gene, estimates_group = shrunk_params_gene,
metadata = pseudotime, order.by = "time", split.var = "group")
plot_distr(simul_data, gene = gene, add.density = FALSE, min_counts = 0) +
geom_hline(yintercept = c(simul_data$Index[match(unique(simul_data$group), simul_data$group)][-1])) +
labs(y = "Ordered pseudotime")
#variance changes overtime, whilst keeping the mean AR constant
change_var <- change_var[!is.na(change_var$pval),]
change_var$fdr_var <- p.adjust(change_var$pval_var, method = "fdr")
change_var[order(change_var$fdr_var),][11:20]
#variance changes overtime, whilst keeping the mean AR constant
change_var <- change_var[!is.na(change_var$pval),]
change_var$fdr_var <- p.adjust(change_var$pval_var, method = "fdr")
change_var[order(change_var$fdr_var)[11:20],]
gene <- "Tubb3"
#generating data frame for plotting
simul_data <- make_plotdf_simul(Cast_B6_a1, Cast_B6_tot, gene = gene, estimates_group = shrunk_params_gene,
metadata = pseudotime, order.by = "time", split.var = "group")
plot_distr(simul_data, gene = gene, add.density = FALSE, min_counts = 0) +
geom_hline(yintercept = c(simul_data$Index[match(unique(simul_data$group), simul_data$group)][-1])) +
labs(y = "Ordered pseudotime")
devtools::install()
assert_that(all(c("bb_theta", "tot_gene_mean") %in% names(estimates)),
msg = "estimates must contain 'bb_theta' and 'tot_gene_mean' columns")
library(assertthat)
assert_that(all(c("bb_theta", "tot_gene_mean") %in% names(estimates)),
msg = "estimates must contain 'bb_theta' and 'tot_gene_mean' columns")
all(c("bb_theta", "tot_gene_mean"))
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
#loading required libraries
suppressPackageStartupMessages({
library(ASPEN)
library(gridExtra)
library(openxlsx)
library(knitr)
library(SingleCellExperiment)
library(scran)
library(huxtable)
})
data("Bl6_Cast_a1")
data("Bl6_Cast_tot")
load_file <- system.file("extdata", "Bl6_Cast_cell_annot.xlsx", package = "ASPEN")
cell_annot <- read.xlsx(load_file, rowNames = T)
#keeping annotated cells in the count matrices
Cast_B6_a1 <- Cast_B6_a1[,gsub(".*_", "", colnames(Cast_B6_a1)) %in% cell_annot$cell_barcode]
Cast_B6_tot <- Cast_B6_tot[,gsub(".*_", "", colnames(Cast_B6_tot)) %in% cell_annot$cell_barcode]
#creating SingleCellExperiment object
ase_sce <- SingleCellExperiment(assays = list(a1 = as.matrix(Cast_B6_a1),
tot = as.matrix(Cast_B6_tot)))
#removing lowly expressed genes
ase_sce <- ase_sce[rowSums(assays(ase_sce)[['tot']] > 1) >= 10, ]
print_md(as_huxtable(dim(ase_sce)))
#splitting the metadata by cell type
cell_list <- split(cell_annot, f = cell_annot$cell_idents)
#splitting SingleCellExperiemnt object by cell types
ase_sce_byct <- list()
for (i in 1:length(cell_list)){
ase_sce_byct[[i]] <- ase_sce[,colnames(ase_sce) %in% cell_list[[i]]$cell_id]
}
#removing genes with low expression
ase_sce_byct_filt <- lapply(ase_sce_byct, function(q)
q[rowSums(assays(q)[['tot']] > 1) >= 10, ])
#extracting raw total counts
tot_mat <- lapply(ase_sce_byct_filt, function(q) as.matrix(assays(q)[['tot']]))
#extracting raw reference allele counts
a1_mat <- lapply(ase_sce_byct_filt, function(q) as.matrix(assays(q)[['a1']]))
#selecting genes that matched filtering criteria
a1_mat <- mapply(function(p,q) p[rownames(q), ], a1_mat, tot_mat, SIMPLIFY = F)
mapply(function(p, q) dim(p) == dim(q), a1_mat, tot_mat, SIMPLIFY = F)
mapply(function(p, q) table(rownames(p) == rownames(q)), a1_mat, tot_mat, SIMPLIFY = F)
#adding barcode id
cell_annot$cell_id <- paste(cell_annot$clone, cell_annot$cell_barcode, sep = "_")
print_md(as_huxtable(head(cell_annot)))
#splitting the metadata by cell type
cell_list <- split(cell_annot, f = cell_annot$cell_idents)
#splitting SingleCellExperiemnt object by cell types
ase_sce_byct <- list()
for (i in 1:length(cell_list)){
ase_sce_byct[[i]] <- ase_sce[,colnames(ase_sce) %in% cell_list[[i]]$cell_id]
}
#removing genes with low expression
ase_sce_byct_filt <- lapply(ase_sce_byct, function(q)
q[rowSums(assays(q)[['tot']] > 1) >= 10, ])
#extracting raw total counts
tot_mat <- lapply(ase_sce_byct_filt, function(q) as.matrix(assays(q)[['tot']]))
#extracting raw reference allele counts
a1_mat <- lapply(ase_sce_byct_filt, function(q) as.matrix(assays(q)[['a1']]))
#selecting genes that matched filtering criteria
a1_mat <- mapply(function(p,q) p[rownames(q), ], a1_mat, tot_mat, SIMPLIFY = F)
mapply(function(p, q) table(rownames(p) == rownames(q)), a1_mat, tot_mat, SIMPLIFY = F)
#loading required libraries
suppressPackageStartupMessages({
library(ASPEN)
library(gridExtra)
library(openxlsx)
library(knitr)
library(SingleCellExperiment)
library(scran)
library(huxtable)
})
data("Bl6_Cast_a1")
data("Bl6_Cast_tot")
load_file <- system.file("extdata", "Bl6_Cast_cell_annot.xlsx", package = "ASPEN")
cell_annot <- read.xlsx(load_file, rowNames = T)
#adding barcode id
cell_annot$cell_id <- paste(cell_annot$clone, cell_annot$cell_barcode, sep = "_")
print_md(as_huxtable(head(cell_annot)))
#keeping annotated cells in the count matrices
Cast_B6_a1 <- Cast_B6_a1[,gsub(".*_", "", colnames(Cast_B6_a1)) %in% cell_annot$cell_barcode]
Cast_B6_tot <- Cast_B6_tot[,gsub(".*_", "", colnames(Cast_B6_tot)) %in% cell_annot$cell_barcode]
#creating SingleCellExperiment object
ase_sce <- SingleCellExperiment(assays = list(a1 = as.matrix(Cast_B6_a1),
tot = as.matrix(Cast_B6_tot)))
#removing lowly expressed genes
ase_sce <- ase_sce[rowSums(assays(ase_sce)[['tot']] > 1) >= 10, ]
print_md(as_huxtable(dim(ase_sce)))
#splitting the metadata by cell type
cell_list <- split(cell_annot, f = cell_annot$cell_idents)
#splitting SingleCellExperiemnt object by cell types
ase_sce_byct <- list()
for (i in 1:length(cell_list)){
ase_sce_byct[[i]] <- ase_sce[,colnames(ase_sce) %in% cell_list[[i]]$cell_id]
}
#removing genes with low expression
ase_sce_byct_filt <- lapply(ase_sce_byct, function(q)
q[rowSums(assays(q)[['tot']] > 1) >= 10, ])
#extracting raw total counts
tot_mat <- lapply(ase_sce_byct_filt, function(q) as.matrix(assays(q)[['tot']]))
#extracting raw reference allele counts
a1_mat <- lapply(ase_sce_byct_filt, function(q) as.matrix(assays(q)[['a1']]))
#selecting genes that matched filtering criteria
a1_mat <- mapply(function(p,q) p[rownames(q), ], a1_mat, tot_mat, SIMPLIFY = F)
bb_init_params <- mapply(function(p, q) estim_bbparams(p, q, min_cells = 5, cores = 6), a1_mat, tot_mat, SIMPLIFY = F)
min_cutoff <- lapply(bb_init_params, calc_mad)
min_cutoff
set.seed(1001011)
shrink_pars <- mapply(function(p, q) estim_delta(p, thetaFilter = q),
bb_init_params, min_cutoff, SIMPLIFY = F)
shrink_pars
bb_init_params <- lapply(bb_init_params, function(q) q[!is.na(q$bb_theta),])
shrunk_estims_vardelta <- mapply(function(p, q) correct_theta(p, N_set = q[1], delta_set = q[2], thetaFilter = 0.001, shrinkAll = TRUE),
bb_init_params, shrink_pars, SIMPLIFY = F)
print_md(as_huxtable(head(shrunk_estims_vardelta[[1]])))
bb_var_res <- mapply(function(p, q, r) bb_var(p, q, estimates = r,
min_cells = 5, min_counts = 5,
n_pmt = 500, n_sim = 500),
a1_mat, tot_mat, shrunk_estims, SIMPLIFY = F)
bb_init_params <- lapply(bb_init_params, function(q) q[!is.na(q$bb_theta),])
shrunk_estims <- mapply(function(p, q) correct_theta(p, N_set = q[1], delta_set = q[2], thetaFilter = 0.001, shrinkAll = TRUE),
bb_init_params, shrink_pars, SIMPLIFY = F)
print_md(as_huxtable(head(shrunk_estims[[1]])))
bb_var_res <- mapply(function(p, q, r) bb_var(p, q, estimates = r,
min_cells = 5, min_counts = 5,
n_pmt = 500, n_sim = 500),
a1_mat, tot_mat, shrunk_estims, SIMPLIFY = F)
pkgdown::build_site()
$stdout
#loading required libraries
suppressPackageStartupMessages({
library(ASPEN)
library(gridExtra)
library(openxlsx)
library(knitr)
library(SingleCellExperiment)
library(scran)
library(huxtable)
})
data("Bl6_Cast_a1")
data("Bl6_Cast_tot")
load_file <- system.file("extdata", "Bl6_Cast_cell_annot.xlsx", package = "ASPEN")
cell_annot <- read.xlsx(load_file, rowNames = T)
#adding barcode id
cell_annot$cell_id <- paste(cell_annot$clone, cell_annot$cell_barcode, sep = "_")
print_md(as_huxtable(head(cell_annot)))
#keeping annotated cells in the count matrices
Cast_B6_a1 <- Cast_B6_a1[,gsub(".*_", "", colnames(Cast_B6_a1)) %in% cell_annot$cell_barcode]
Cast_B6_tot <- Cast_B6_tot[,gsub(".*_", "", colnames(Cast_B6_tot)) %in% cell_annot$cell_barcode]
#creating SingleCellExperiment object
ase_sce <- SingleCellExperiment(assays = list(a1 = as.matrix(Cast_B6_a1),
tot = as.matrix(Cast_B6_tot)))
#removing lowly expressed genes
ase_sce <- ase_sce[rowSums(assays(ase_sce)[['tot']] > 1) >= 10, ]
print_md(as_huxtable(dim(ase_sce)))
#splitting the metadata by cell type
cell_list <- split(cell_annot, f = cell_annot$cell_idents)
#splitting SingleCellExperiemnt object by cell types
ase_sce_byct <- list()
for (i in 1:length(cell_list)){
ase_sce_byct[[i]] <- ase_sce[,colnames(ase_sce) %in% cell_list[[i]]$cell_id]
}
#removing genes with low expression
ase_sce_byct_filt <- lapply(ase_sce_byct, function(q)
q[rowSums(assays(q)[['tot']] > 1) >= 10, ])
#extracting raw total counts
tot_mat <- lapply(ase_sce_byct_filt, function(q) as.matrix(assays(q)[['tot']]))
#extracting raw reference allele counts
a1_mat <- lapply(ase_sce_byct_filt, function(q) as.matrix(assays(q)[['a1']]))
#selecting genes that matched filtering criteria
a1_mat <- mapply(function(p,q) p[rownames(q), ], a1_mat, tot_mat, SIMPLIFY = F)
bb_init_params <- mapply(function(p, q) estim_bbparams(p, q, min_cells = 5, cores = 6), a1_mat, tot_mat, SIMPLIFY = F)
min_cutoff <- lapply(bb_init_params, calc_mad)
min_cutoff
set.seed(1001011)
shrink_pars <- mapply(function(p, q) estim_delta(p, thetaFilter = q),
bb_init_params, min_cutoff, SIMPLIFY = F)
shrink_pars
bb_init_params <- lapply(bb_init_params, function(q) q[!is.na(q$bb_theta),])
shrunk_estims <- mapply(function(p, q) correct_theta(p, N_set = q[1], delta_set = q[2], thetaFilter = 0.001, shrinkAll = TRUE),
bb_init_params, shrink_pars, SIMPLIFY = F)
print_md(as_huxtable(head(shrunk_estims[[1]])))
bb_var_res <- mapply(function(p, q, r) bb_var(p, q, estimates = r,
min_cells = 5, min_counts = 5,
n_pmt = 500, n_sim = 500),
a1_mat[1], tot_mat[1], shrunk_estims[1], SIMPLIFY = F)
bb_var_res <- lapply(bb_var_res, function(q) q <- q[!is.na(q$pval_disp),])
#calculating fdr
bb_var_res <- lapply(bb_var_res, function(q)
{q$fdr_disp <- p.adjust(q$pval_disp, method = "fdr");
q <- q[order(q$fdr_mean),];
return(q)})
head(bb_var_res[[1]])
bb_var_res <- lapply(bb_var_res, function(q)
{q$fdr_disp <- p.adjust(q$pval_disp, method = "fdr");
q <- q[order(q$fdr_var),];
return(q)})
bb_var_res <- lapply(bb_var_res, function(q) q <- q[!is.na(q$pval_disp),])
#calculating fdr
bb_var_res <- lapply(bb_var_res, function(q)
{q$fdr_disp <- p.adjust(q$pval_disp, method = "fdr");
q <- q[order(q$fdr_var),];
return(q)})
#calculating fdr
bb_var_res <- lapply(bb_var_res, function(q)
{q$fdr_disp <- p.adjust(q$pval_disp, method = "fdr");
return(q)})
bb_var_res <- lapply(bb_var_res, function(q) q <- q[order(q$fdr_var),])
bb_var_res <- lapply(bb_var_res, function(q) q[order(q$fdr_var),])
View(bb_var_res)
View(bb_var_res[[1]])
class(bb_var_res$fdr_disp)
class(bb_var_res[[1]]$fdr_disp)
bb_var_res[[1]] <- bb_var_res[[1]][order(bb_var_res[[1]]$fdr_var),]
is.null(bb_var_res[[1]]$fdr_var)
#calculating fdr
bb_var_res <- lapply(bb_var_res, function(q)
{q$fdr_disp <- p.adjust(q$pval_disp, method = "fdr");
q <- q[order(q$fdr_disp),];
return(q)})
bb_var_res <- lapply(bb_var_res, function(q) {q$monoal <- ifelse(q$alpha < 1 | q$beta < 1, 1, 0);
return(q)})
lapply(bb_var_res, function(q) table(q$monoal))
lapply(bb_var_res, function(q) q[q$monoal == 1, c("AR", "fdr_disp")][1:10,])
#specifiying genes for plotting
genes_select <- list("Olig2", "Meg3", "Kcnq1ot1")
#generating data frame for plotting
plot_data <- lapply(genes_select, function(q) makedf(a1_mat[[4]], tot_mat[[4]], gene = q))
p_ar_dist <- mapply(function(p,q,r) plot_distr(p, gene = q),
plot_data, genes_select, SIMPLIFY = F)
do.call(grid.arrange, c(p_ar_dist, ncol = 3))
bb_var_res <- lapply(bb_var_res, function(q) {q$abdiff <- abs(q$alpha - q$beta);
return(q)})
bb_var_res <- lapply(bb_var_res, function(q) {q$rme <- ifelse(q$alpha < 1 &
q$beta < 1 &
q$abdiff < 0.5, 1, 0);
return(q)})
lapply(bb_var_res, function(q) table(q$rme))
lapply(bb_var_res, function(q) q[q$rme == 1, c("AR", "fdr_disp")][1:10,])
gene = "Bex2"
exp_theta <- plot_exp_disp(bb_var_res[[1]], gene = gene)
#generating data frame for plotting
plot_data <- makedf(a1_mat[[1]], tot_mat[[1]], gene = gene)
ar_dist <- plot_distr(plot_data,  gene = gene)
grid.arrange(exp_theta, ar_dist, ncol = 2)
bb_var_res[[1]][c("Bex2", "Npm1"), c("AR", "tot_gene_mean", "fdr_mean", "fdr_disp")]
bb_var_res[[1]][c("Bex2", "Npm1"), c("AR", "tot_gene_mean", "fdr_disp")]
gene = "Npm1"
exp_theta <- plot_exp_disp(bb_var_res[[1]], gene = gene)
#generating data frame for plotting
plot_data <- makedf(a1_mat[[1]], tot_mat[[1]], gene = gene)
ar_dist <- plot_distr(plot_data,  gene = gene)
grid.arrange(exp_theta, ar_dist, ncol = 2)
pkgdown::build_site()
usethis:::git_push_first()
